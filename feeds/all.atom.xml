<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DotMobo</title><link href="http://dotmobo.github.io/" rel="alternate"></link><link href="http://dotmobo.github.io/feeds/all.atom.xml" rel="self"></link><id>http://dotmobo.github.io/</id><updated>2015-11-15T00:00:00+01:00</updated><entry><title>Introduction à Asyncio</title><link href="http://dotmobo.github.io/introduction-asyncio.html" rel="alternate"></link><updated>2015-11-15T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-11-15:introduction-asyncio.html</id><summary type="html">&lt;img alt="Django" class="align-right" src="./images/python.png" /&gt;
&lt;p&gt;La librairie &lt;a class="reference external" href="http://asyncio.org/"&gt;Asyncio&lt;/a&gt;
a fait beaucoup parler d'elle dernièrement, au point d'être
intégrer dans la bibliothèque standard depuis la version 3.4 de Python.&lt;/p&gt;
&lt;p&gt;C'est la réponse aux &lt;a class="reference external" href="https://gobyexample.com/goroutines"&gt;goroutines&lt;/a&gt;
de &lt;a class="reference external" href="https://golang.org/"&gt;Go&lt;/a&gt;, inscrivant ainsi Python dans la liste des
langages permettant la programmation asynchrone. Ce type de programmation permet
de ne pas bloquer son programme lors des opérations I/O qui peuvent durer un
certain temps et de réagir lors de la réception des informations au
lieu de les attendre. Ça permet ainsi d'optimiser et d'améliorer fortement les
performances de son code.&lt;/p&gt;
&lt;p&gt;Je t'invite à te renseigner sur les différences entre programmation asynchrone,
parallèle et concurrente via &lt;a class="reference external" href="http://sametmax.com/la-difference-entre-la-programmation-asynchrone-parallele-et-concurrente/"&gt;l'article de Sam&amp;amp;Max&lt;/a&gt;
et &lt;a class="reference external" href="https://www.youtube.com/watch?v=JpqnNCx7wVY"&gt;la vidéo de Jonathan Worthington&lt;/a&gt; du monde Perl.&lt;/p&gt;
&lt;p&gt;Asyncio utilise une boucle d'événements qui va contenir l'ensemble de nos tâches
à exécuter. Ces tâches devront être sous la forme de &lt;a class="reference external" href="http://sametmax.com/quest-ce-quune-coroutine-en-python-et-a-quoi-ca-sert/"&gt;coroutines&lt;/a&gt;,
qui sont des sortes de générateurs inversés, c'est-à-dire qu'on y envoie des données à la place
d'en reçevoir. C'est le côté &lt;em&gt;lazy&lt;/em&gt; des coroutines qui permet à Asyncio de les
exécuter en asynchrone.&lt;/p&gt;
&lt;p&gt;Trêve de blabla et passons à la pratique. Il y a déjà beaucoup d'articles sur le net
traitant du fonctionnement d'Asyncio et ce n'est pas forcément facile
de s'y retrouver. Tu vas donc voir ici un cas d'usage concret, qui est le développement
d'un aggrégateur de données &lt;em&gt;json&lt;/em&gt; performant. Le tutorial sera en python 3.5,
ce qui te permettra d'utiliser les nouveaux mots clés &lt;strong&gt;async&lt;/strong&gt; et &lt;strong&gt;await&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tu utiliseras la boucle d'événements, les coroutines et les objets &lt;strong&gt;Future&lt;/strong&gt;.
L'idée n'est pas de faire le code le plus simple et performant possible, mais plutôt de passer
en revue l'ensemble des concepts et mots-clés utiles.&lt;/p&gt;
&lt;p&gt;Pour Asyncio, il n'y a rien à installer à part python 3.5. Par contre, il va te
falloir &lt;a class="reference external" href="https://github.com/KeepSafe/aiohttp"&gt;aiohttp&lt;/a&gt; pour faire les requêtes http:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install aiohttp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et c'est là où le bât blesse. Tu ne pourras pas utiliser &lt;a class="reference external" href="http://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt; par exemple, car
il faut utiliser des outils compatibles avec Asyncio, c'est-à-dire écrit sous forme
de coroutines. Sinon, le programme bloquera la boucle d'événements et ça ne sera
pas asynchrone. Pareil pour les accès &lt;em&gt;BDD&lt;/em&gt;, il faut utiliser &lt;a class="reference external" href="https://github.com/aio-libs/aiopg"&gt;aiopg&lt;/a&gt; pour postgresql par exemple.&lt;/p&gt;
&lt;p&gt;Tu crées un fichier &lt;em&gt;asyncio35.py&lt;/em&gt;, tu importes &lt;em&gt;aiohttp&lt;/em&gt; et &lt;em&gt;asyncio&lt;/em&gt; et tu déclares ta liste
d'urls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;

&lt;span class="n"&gt;URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://ip.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://headers.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;http://date.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu vas alors créer ta coroutine qui va récupérer les données renvoyées par une
url et les insérer dans un objet &lt;strong&gt;Future&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Coroutine récupérant les données provenant d&amp;#39;une url &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plusieurs explications sont nécessaires ici:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;async&lt;/strong&gt;: Nouveau mot-clé introduit en python 3.5, à mettre avant le &lt;strong&gt;def&lt;/strong&gt;, qui permet de spécifier que cette méthode est une coroutine asynchrone. Ça vient remplacer le &lt;strong&gt;&amp;#64;asyncio.coroutine&lt;/strong&gt; de python 3.4.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;async with&lt;/strong&gt;: Permet d'utiliser des &lt;em&gt;context managers&lt;/em&gt; asynchrones.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;await&lt;/strong&gt;: Bloque l'exécution de la coroutine jusqu'à la fin du traitement de l'instruction, ici &lt;strong&gt;response.json()&lt;/strong&gt;. Ça vient remplacer le &lt;strong&gt;yield from&lt;/strong&gt; de python 3.4.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;future.set_result&lt;/strong&gt;: Définit la valeur de l'objet &lt;strong&gt;Future&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ensuite, dans ton &lt;em&gt;main&lt;/em&gt;, tu initalises ta boucle, ton client &lt;em&gt;aiohttp&lt;/em&gt;, ta liste
de tâches et ta liste de résultats:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# On initialise les variables&lt;/span&gt;
    &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu ajoutes ton &lt;em&gt;callback&lt;/em&gt; pour les objets &lt;strong&gt;Future&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fill_results_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Callback de l&amp;#39;objet future qui ajoute sa valeur dans une liste &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour chaque url, tu vas:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;créer un objet &lt;strong&gt;Future&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;ajouter la méthode &lt;strong&gt;call_url&lt;/strong&gt; à la liste des tâches à accomplir via la méthode &lt;strong&gt;ensure_future&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;ajouter ton &lt;em&gt;callback&lt;/em&gt; &lt;strong&gt;fill_results_list&lt;/strong&gt; à ton objet &lt;strong&gt;Future&lt;/strong&gt; via la méthode &lt;strong&gt;add_done_callback&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# On créé les objets Future et la liste des tâches&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URLS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;list_tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill_results_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Puis, il suffit de lancer l'exécution des tâches de manière asynchrone via
la boucle d'événements et sa méthode &lt;strong&gt;run_until_complete&lt;/strong&gt;. Ton programme
sera bloqué ici jusqu'à la fin du traitement de toutes les tâches et donc de la
réception des objets &lt;strong&gt;Future&lt;/strong&gt; via &lt;strong&gt;asyncio.wait&lt;/strong&gt;. À la fin, il affiche la liste
des résultats sur la sortie standard:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Exécution des tâches&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_tasks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enfin, tu peux fermer le client &lt;em&gt;aiohttp&lt;/em&gt; et la boucle d'événements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Ferme le client et la boucle&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Encore une chose concernant la boucle. Celle-ci est unique pour tout le programme.
Donc il faut faire attention quand tu la manipules à plusieurs endroits du code,
et quand tu la fermes.&lt;/p&gt;
&lt;p&gt;Voici le résultat final :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Aggrégation de données provenant d&amp;#39;urls&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://ip.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://headers.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;http://date.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Coroutine récupérant les données provenant d&amp;#39;une url &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# On initialise les variables&lt;/span&gt;
    &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fill_results_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Callback de l&amp;#39;objet future qui ajoute sa valeur dans une liste &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c"&gt;# On créé les objets Future et la liste des tâches&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URLS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;list_tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill_results_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Exécution des tâches&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_tasks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Ferme le client et la boucle&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et hop, tu exécutes tout ça:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;python asyncio35.py
&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;109.221.53.120&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Host&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;headers.jsontest.com&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Python/3.5 aiohttp/0.18.4&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;*/*&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Content-Length&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;11-14-2015&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;03:16:45 PM&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;milliseconds_since_epoch&amp;#39;&lt;/span&gt;: 1447514205836&lt;span class="o"&gt;}]&lt;/span&gt;

real        0m0.511s
user        0m0.263s
sys 0m0.033s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Ok c'est sympa mais est-ce que c'est vraiment plus rapide en asynchrone ?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Tu veux une preuve ? En voici une; le même programme sans Asyncio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Aggrégation de données provenant d&amp;#39;urls&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://ip.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://headers.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;http://date.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;list_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URLS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu l'exécutes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;python noasyncio35.py
&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;109.221.53.120&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Host&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;headers.jsontest.com&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;python-requests/2.8.1&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;*/*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;11-14-2015&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;11:57:03 AM&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;milliseconds_since_epoch&amp;#39;&lt;/span&gt;: 1447502223337&lt;span class="o"&gt;}]&lt;/span&gt;

real        0m1.188s
user        0m0.247s
sys 0m0.017s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le double de temps ! Convaincu ?&lt;/p&gt;
&lt;p&gt;Alors évidemment, ce n'est qu'un simple cas d'usage. Il y a beaucoup, mais
vraiment beaucoup plus à voir dans &lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;la doc officielle&lt;/a&gt;.&lt;/p&gt;
</summary><category term="python"></category><category term="asychrone"></category><category term="asyncio"></category><category term="aiohttp"></category><category term="requests"></category><category term="json"></category><category term="http"></category><category term="async"></category><category term="await"></category><category term="coroutine"></category></entry><entry><title>TinyDB, la base de données pure python</title><link href="http://dotmobo.github.io/tinydb.html" rel="alternate"></link><updated>2015-11-06T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-11-06:tinydb.html</id><summary type="html">&lt;img alt="TinyDB" class="align-right" src="./images/tinydb.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/msiemens/tinydb"&gt;TinyDB&lt;/a&gt;, ce n'est pas la base de données qui va tout révolutionner, mais
c'est le petit outil sympa à avoir à portée de main.&lt;/p&gt;
&lt;p&gt;Elle est orientée &lt;em&gt;document&lt;/em&gt;, comme &lt;a class="reference external" href="https://www.mongodb.org/"&gt;MongoDB&lt;/a&gt;, en se basant sur des fichiers &lt;a class="reference external" href="http://www.json.org/"&gt;JSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Le code est écrit en pure python, sans besoin d'aucune dépendance, et est compatible
python 2 et 3.&lt;/p&gt;
&lt;p&gt;Niveau utilisation, il ne faut pas espérer des perfs de malade ; ce n'est pas fait
pour ça.&lt;/p&gt;
&lt;p&gt;Par contre, si tu as besoin d'une mini BDD pour afficher des news sur
un site, ça fera l'affaire.&lt;/p&gt;
&lt;p&gt;Personnellement, je l'utilise plutôt lors de la rédaction de tests unitaires,
lorsque j'ai besoin d'une batterie de données de test.&lt;/p&gt;
&lt;p&gt;Pour l'utiliser, tu l'installes via &lt;em&gt;pip&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install tinydb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu crées, par exemple, une base de données contenant des légumes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;meslegumes.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le fichier &lt;em&gt;meslegumes.json&lt;/em&gt; correspond à ta base de données et s'est créé dans
le répertoire courant.&lt;/p&gt;
&lt;p&gt;Tu crées alors une table &lt;em&gt;legumes&lt;/em&gt;. Évite les caractères spéciaux dans le nom de la table,
ça peut poser problème:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;legumes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu vas maintenant insérer des légumes via la méthode &lt;em&gt;insert&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En affichant tous les éléments de ta table, tu verras tes légumes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux désormais utiliser un langage de requête.
Par exemple, si tu veux récupérer toutes les carottes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou tous les légumes qui sont plus de deux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux utiliser le &lt;strong&gt;ET&lt;/strong&gt; et le &lt;strong&gt;OU&lt;/strong&gt; logique, pour combiner tes requêtes lors
de ta recherche de légumes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux évidemment mettre à jour tes navets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et supprimer tes carottes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou carrément vider tous tes légumes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voilà pour les bases! Pour un usage simple, ça devrait te suffire.&lt;/p&gt;
&lt;p&gt;Il existe &lt;a class="reference external" href="http://tinydb.readthedocs.org/en/latest/usage.html#recap"&gt;d'autres opérations&lt;/a&gt;
pour le langage de requête comme &lt;em&gt;insert_multiple&lt;/em&gt;,
&lt;em&gt;delete&lt;/em&gt;, &lt;em&gt;increment&lt;/em&gt;, &lt;em&gt;decrement&lt;/em&gt;, &lt;em&gt;get&lt;/em&gt;, &lt;em&gt;contains&lt;/em&gt;, &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tu peux également stocker les légumes en mémoire à la place du fichier json:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb.storages&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MemoryStorage&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MemoryStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et utiliser des &lt;em&gt;middlewares&lt;/em&gt;, pour faire du cache par exemple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb.storages&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONStorage&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb.middlewares&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CachingMiddleware&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;meslegumes.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CachingMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSONStorage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enfin, il est également possible de customiser TinyDB en écrivant ton propre
&lt;a class="reference external" href="http://tinydb.readthedocs.org/en/latest/extend.html#write-a-serializer"&gt;Serializer&lt;/a&gt;,
ou d'écrire une &lt;a class="reference external" href="http://tinydb.readthedocs.org/en/latest/extend.html#write-a-custom-storage"&gt;implémentation YAML&lt;/a&gt;
pour le stockage des données à la place de JSON, ou encore d'écrire
&lt;a class="reference external" href="http://tinydb.readthedocs.org/en/latest/extend.html#write-a-custom-middleware"&gt;tes propres Middlewares&lt;/a&gt;.&lt;/p&gt;
</summary><category term="tinydb"></category><category term="python"></category><category term="base de données"></category><category term="bdd"></category><category term="nosql"></category></entry><entry><title>Gestion des pays dans django avec django-countries</title><link href="http://dotmobo.github.io/django-countries.html" rel="alternate"></link><updated>2015-10-31T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-31:django-countries.html</id><summary type="html">&lt;img alt="Django" class="align-right" src="./images/djangopony.png" /&gt;
&lt;p&gt;En développement web, on a souvent besoin de faire des formulaires. Et
notamment des formulaires d'inscription, avec saisie du nom, prénom, adresse et
donc pays.&lt;/p&gt;
&lt;p&gt;Tu m'accorderas que laisser le champs pays libre risque de générer des
erreurs de saisie, et que gérer manuellement une liste déroulante de pays est
ennuyeux à mourir.&lt;/p&gt;
&lt;p&gt;Rassure-toi, une solution existe, et c'est là qu'intervient
&lt;a class="reference external" href="https://github.com/SmileyChris/django-countries"&gt;django-countries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Django-countries, c'est la librairie qui ne paie pas de mine mais qui, l'air de
rien, est vachement pratique. Elle propose:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Une liste déroulante pour les formulaires, contenant la liste de tous les
pays avec leurs &lt;a class="reference external" href="http://www.iso.org/iso/fr/country_codes.htm"&gt;codes iso 3166&lt;/a&gt;,
traduite dans 25 langues.&lt;/li&gt;
&lt;li&gt;Des widgets.&lt;/li&gt;
&lt;li&gt;Des fichiers statiques correspondants aux icônes des drapeaux des pays.&lt;/li&gt;
&lt;li&gt;Un champ pays pour les modèles.&lt;/li&gt;
&lt;li&gt;Une compatibilité avec &lt;a class="reference external" href="http://www.django-rest-framework.org/"&gt;Django Rest Framework&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tu l'installes via pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django-countries
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et tu ajoutes &lt;strong&gt;django_countries&lt;/strong&gt; dans la liste de tes &lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;
dans le fichier &lt;em&gt;settings.py&lt;/em&gt; de django.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;django_countries&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Au niveau de ton modèle, tu peux maintenant utiliser le champ &lt;strong&gt;CountryField&lt;/strong&gt;,
qui est basé sur &lt;strong&gt;CharField&lt;/strong&gt; et qui correspond au code iso 3166:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_countries.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CountryField&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CountryField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(select country)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux maintenant créer une personne avec un pays associé, et accéder aux
différents attributs du pays comme son code, son icône, son nom et autres:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;
&lt;span class="n"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;New Zealand&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;/static/flags/nz.gif&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alpha3&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;NZL&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;554&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numeric_padded&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;554&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dans le formulaire associé à ton modèle, tu peux aussi utiliser un widget qui va
afficher le drapeau du pays à côté de la liste déroulante:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_countries.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CountrySelectWidget&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PersonForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CountrySelectWidget&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dans le &lt;em&gt;settings.py&lt;/em&gt;, on peut spécifier les pays à utiliser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;COUNTRIES_ONLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;AU&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou carrément customiser la liste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;COUNTRIES_OVERRIDE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;NZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Middle Earth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;AU&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et on a donc également une compatibilité avec Django Rest Framework en modifiant
le serializer de cette manière:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PersonSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CountryField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Je ne suis pas rentré dans le détail de la customisation pour rester simple,
mais il est possible de modifier pas mal de choses au niveau de la liste,
du champ, de l'affichage et du paramétrage.&lt;/p&gt;
&lt;p&gt;A voir dans la doc officielle si ça t'intéresse!&lt;/p&gt;
</summary><category term="python"></category><category term="django"></category><category term="django-countries"></category><category term="countries"></category><category term="pays"></category></entry><entry><title>Intégration continue sous Github avec Tox, Travis, Coveralls et Landscape</title><link href="http://dotmobo.github.io/integration-continue.html" rel="alternate"></link><updated>2015-10-25T00:00:00+02:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-25:integration-continue.html</id><summary type="html">&lt;img alt="Travis" class="align-right" src="./images/travis.png" /&gt;
&lt;p&gt;L'&lt;a class="reference external" href="https://fr.wikipedia.org/wiki/Int%C3%A9gration_continue"&gt;intégration continue&lt;/a&gt;
est une part très importante d'un projet, à ne surtout pas négliger.
Elle permet de vérifier constamment son code via des tests unitaires,
généralement à chaque &lt;em&gt;commit&lt;/em&gt;. Ceci permet de tester la qualité et la robustesse
du code et d'éviter toutes régressions.&lt;/p&gt;
&lt;p&gt;Dans cet article, tu verras comment mettre en place l'intégration continue d'une application
&lt;a class="reference external" href="https://www.python.org/"&gt;python&lt;/a&gt; sous &lt;a class="reference external" href="https://github.com/"&gt;Github&lt;/a&gt;. À la fin de cette lecture, tu seras capable:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;d'écrire un test unitaire simple.&lt;/li&gt;
&lt;li&gt;de vérifier la couverture de ton code.&lt;/li&gt;
&lt;li&gt;d'exécuter tes tests sous plusieurs versions de python.&lt;/li&gt;
&lt;li&gt;d'automatiser l’exécution des tests à chaque &lt;em&gt;commit&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;d'automatiser la vérification de la couverture du code.&lt;/li&gt;
&lt;li&gt;d'automatiser l'analyse de la qualité de ton code.&lt;/li&gt;
&lt;li&gt;d'utiliser les badges github pour l'affichage des rapports.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L'application de démo de ce tuto est dispo &lt;a class="reference external" href="https://github.com/dotmobo/demo-integration-continue"&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="creer-une-application"&gt;
&lt;h2&gt;1) Créer une application&lt;/h2&gt;
&lt;p&gt;Dans le répertoire de ton projet &lt;em&gt;myproject&lt;/em&gt;, tu vas créer un package &lt;em&gt;myapp&lt;/em&gt; contenant le
classique &lt;em&gt;__init__.py&lt;/em&gt;, ainsi qu'un fichier &lt;em&gt;maths.py&lt;/em&gt;.
Celui-ci contiendra une méthode d'addition et de soustraction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Provides an addition function and a subtraction function&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Méthode d&amp;#39;addition &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Méthode de soustraction &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu vas donc mettre en place l'intégration continue sur ce petit bout de code.&lt;/p&gt;
&lt;p&gt;Tu ajoutes également dans le répertoire du projet le fichier &lt;em&gt;setup.py&lt;/em&gt; suivant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;My project&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Me&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;me@noreply.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://myproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Puis, tu exécutes la commande suivante afin d'ajouter ton application dans le &lt;em&gt;path&lt;/em&gt;
python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;develop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ajouter-des-tests-unitaires"&gt;
&lt;h2&gt;2) Ajouter des tests unitaires&lt;/h2&gt;
&lt;p&gt;Tu vas maintenant créer des tests unitaires à l'aide de
&lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Au même niveau que ton package &lt;em&gt;myapp&lt;/em&gt;, tu vas créer un package &lt;em&gt;tests&lt;/em&gt; qui sera
dédié aux tests unitaires. Celui-ci doit contenir le fichier &lt;em&gt;__init__.py&lt;/em&gt; et le
fichier &lt;em&gt;test_maths.py&lt;/em&gt; suivant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Tests unitaires&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.maths&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subtraction&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MathsTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Classe qui va contenir nos test unitaires&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Méthode qui permet d&amp;#39;initialiser des variables pour nos tests &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Test de l&amp;#39;addition &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Test de la soustraction &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Méthode appelée à la fin des tests &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et pour vérifier le bon fonctionnement de tes tests, tu peux les exécuter via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python tests/test_maths.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour plus d'informations concernant les tests unitaires, je t'invite à te pencher
sur le dossier de Sam&amp;amp;Max :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-1/"&gt;http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-2/"&gt;http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-3/"&gt;http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-3/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-4/"&gt;http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-4/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="couvrir-son-code-avec-coverage"&gt;
&lt;h2&gt;3) Couvrir son code avec Coverage&lt;/h2&gt;
&lt;p&gt;Tu vas maintenant ajouter les utilitaires permettant la couverture de ton code.&lt;/p&gt;
&lt;p&gt;Premièrement, tu installes &lt;a class="reference external" href="https://bitbucket.org/ned/coveragepy"&gt;coverage&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install coverage
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Puis, tu crées le fichier de configuration de coverage appelé &lt;em&gt;.coveragerc&lt;/em&gt;
dans ton répertoire &lt;em&gt;myproject&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;run&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    myapp

&lt;span class="o"&gt;[&lt;/span&gt;report&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;omit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; */tests/*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu y indiques d'exéctuer les tests de ton application &lt;em&gt;myapp&lt;/em&gt;, tout en
ignorant d'analyser la couverture des fichiers de tests.
Sinon, il faudrait faire des tests unitaires pour tester les tests unitaires !&lt;/p&gt;
&lt;p&gt;Tu lances les tests unitaires avec coverage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;coverage run -m unittest discover tests/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux désormais afficher un rapport simple via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;coverage report
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou un rapport html via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;coverage html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Celui-ci s'est créé dans le répertoire &lt;em&gt;htmlcov&lt;/em&gt;. A l'aide de ce rapport, tu
vas pouvoir visualiser le pourcentage de code couvert ainsi que les zones de code
couvertes et non couvertes, fichier par fichier. Plutôt pratique non ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="utiliser-tox-pour-l-execution-des-tests"&gt;
&lt;h2&gt;4) Utiliser Tox pour l'exécution des tests&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://testrun.org/tox/latest/"&gt;Tox&lt;/a&gt; vise à standardiser l'exécution des tests
unitaires en python. Il permet, à l'aide d'environnements virtuels, de tester ton
code sous plusieurs interpréteurs python et sous plusieurs versions de librairies.&lt;/p&gt;
&lt;p&gt;Il est très simple d'utilisation et s’interface parfaitement avec Travis.&lt;/p&gt;
&lt;p&gt;Tu peux l'installer via pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install tox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ensuite, il te faut créer le fichier &lt;em&gt;tox.ini&lt;/em&gt; dans le répertoire &lt;em&gt;myproject&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tox&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;envlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;py27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;py34&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;testenv&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;coverage&lt;/span&gt;
&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;coverage&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;unittest&lt;/span&gt; &lt;span class="n"&gt;discover&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Explication:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;envlist&lt;/em&gt; permet de lister les interpréteurs python que l'on veut tester. Ici,
tu vas tester ton application sous python 2.7 et python 3.4. Il faut évidemment
les installer sur ton système si ce n'est pas déjà fait.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;deps&lt;/em&gt; liste les dépendances à installer dans le virtualenv qui sera créé.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;commands&lt;/em&gt; indique la commande à exécuter pour lancer les tests unitaires.&lt;/li&gt;
&lt;li&gt;il y a plein d'autres paramètres utilisables, va voir dans la
&lt;a class="reference external" href="https://testrun.org/tox/latest/example/basic.html"&gt;doc officielle&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enfin, pour exécuter tes tests sous les différents environnements, lance la
commande:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plutôt simple non ?&lt;/p&gt;
&lt;p&gt;Crée-toi un dépôt sur Github et &lt;em&gt;commit&lt;/em&gt; tout ça.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="activer-l-integration-continue-de-notre-projet-sous-travis-et-coveralls"&gt;
&lt;h2&gt;5) Activer l'intégration continue de notre projet sous Travis et Coveralls&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis&lt;/a&gt; est un outil d'intégration continue, à la
manière de &lt;a class="reference external" href="https://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;. C'est lui qui va exécuter tes
tests unitaires à chaque &lt;em&gt;commit&lt;/em&gt;, et qui va t'envoyer un mail si un problème a
été rencontré.&lt;/p&gt;
&lt;p&gt;Tu peux t'y connecter via ton compte Github et y ajouter ton dépôt git via le bouton &lt;em&gt;+&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Au préalable, il faut créer un fichier &lt;em&gt;.travis.yml&lt;/em&gt; dans ton répertoire &lt;em&gt;myproject&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;TOX_ENV=py27&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;TOX_ENV=py34&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install tox&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;tox -e $TOX_ENV&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;after_success&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install coveralls&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;coveralls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On y indique les environnements de tox à tester et le script tox à exécuter.&lt;/p&gt;
&lt;p&gt;Tu peux maintenant &lt;em&gt;commiter&lt;/em&gt; tout ça sur ton dépôt Github, et te rendre sur le site
de travis pour visualiser les rapports d'exécution de tes tests!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Attends un peu, c'est quoi la partie qui est dans le after_success, coveralls?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Bien vu! &lt;a class="reference external" href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt; est un outil qui permet de tester
la couverture de code à chaque &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Connecte-toi sur leur plate-forme via ton compte Github et active ton dépôt git via le bouton
&lt;em&gt;add repos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tu vas ainsi pouvoir voir l'évolution de la couverture de code et analyser les rapports proposés.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inspecter-la-qualite-du-code-avec-landscape-io"&gt;
&lt;h2&gt;6) Inspecter la qualité du code avec Landscape.io&lt;/h2&gt;
&lt;p&gt;Landscape.io est une plate-forme qui va inspecter la qualité de ton code à chaque &lt;em&gt;commit&lt;/em&gt;.
Celle-ci est gratuite pour les projets open-source disponibles sur Github.&lt;/p&gt;
&lt;p&gt;Elle se base sur &lt;a class="reference external" href="https://flake8.readthedocs.org/en/2.4.1/"&gt;flake8&lt;/a&gt; comme outil
d'inspection de code.&lt;/p&gt;
&lt;p&gt;Connecte-toi sur la plate-forme avec ton compte Github et ajoutes-y ton dépôt git
via &lt;em&gt;Add repository&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tu devras peut-être refaire un &lt;em&gt;commit&lt;/em&gt; pour activer le bazar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ajouter-des-badges-sur-github"&gt;
&lt;h2&gt;7) Ajouter des badges sur github&lt;/h2&gt;
&lt;p&gt;Tu va pouvoir te créer un fichier &lt;em&gt;README.rst&lt;/em&gt; et y ajouter les badges &lt;em&gt;travis&lt;/em&gt;,
&lt;em&gt;coveralls&lt;/em&gt; et &lt;em&gt;landscape&lt;/em&gt;. Tu peux trouver ces badges sous différents formats, notamment en
&lt;a class="reference external" href="http://sphinx-doc.org/rest.html"&gt;restructuredText&lt;/a&gt;, dans la configuration de
ton projet sur ces trois plate-formes.&lt;/p&gt;
&lt;p&gt;Exemple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;demo-integration-continue&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;-------------------------&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;Application de démo d&amp;#39;intégration continue sous github&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;.. image:&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://travis-ci.org/dotmobo/demo-integration-continue.svg&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;:target&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://travis-ci.org/dotmobo/demo-integration-continue&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;.. image:&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://coveralls.io/repos/dotmobo/demo-integration-continue/badge.svg?branch=master&amp;amp;service=github&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;:target&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://coveralls.io/github/dotmobo/demo-integration-continue?branch=master&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;.. image:&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://landscape.io/github/dotmobo/demo-integration-continue/master/landscape.svg?style=flat&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;:target&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://landscape.io/github/dotmobo/demo-integration-continue/master&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;:alt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Code Health&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Commit&lt;/em&gt; et rends-toi sur ton dépôt github pour voir
&lt;a class="reference external" href="https://github.com/dotmobo/demo-integration-continue"&gt;le résultat&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="github"></category><category term="travis"></category><category term="tox"></category><category term="intégration continue"></category><category term="coveralls"></category><category term="tests unitaires"></category><category term="landscape"></category><category term="coverage"></category></entry><entry><title>Passer de Sublime Text à Atom pour développer en Python</title><link href="http://dotmobo.github.io/sublime-text-to-atom.html" rel="alternate"></link><updated>2015-10-17T00:00:00+02:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-17:sublime-text-to-atom.html</id><summary type="html">&lt;img alt="Pelican" class="align-right" src="./images/atom.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Sublime Text, c'est vraiment pas mal mais bon, c'est pas libre.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Eclipse, c'est lourd, trop lourd.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Vim, j'ai pas le temps de m'y investir.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Emacs, j'y comprends rien.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Pycharm, ce n'est qu'à moitié gratuit.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Atom, y paraît que c'est buggé et lent.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Bon, je vois que tu es un difficile concernant le choix de ton éditeur de code,
et tu as bien raison ! Je t'arrêtes tout de suite en ce qui concerne
&lt;a class="reference external" href="https://atom.io/"&gt;Atom&lt;/a&gt;. Pour les autres, je ne vais pas rentrer dans le
troll!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;C'était&amp;quot;&lt;/em&gt; buggé et lent, mais ça ne l'est plus depuis la sortie de la version
stable 1.0 cet été. La version actuelle (1.0.19) marche plutôt bien et
est enfin devenue une alternative viable à
&lt;a class="reference external" href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Comme ST, tu vas pouvoir bénificier:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;des curseurs multiples.&lt;/li&gt;
&lt;li&gt;de la palette de commandes via &lt;em&gt;ctrl+shift+p&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;de la recherche de fichiers via &lt;em&gt;ctrl+p&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;d'une intégration Git très poussée.&lt;/li&gt;
&lt;li&gt;d'une vue permettant de parcourir tes fichiers.&lt;/li&gt;
&lt;li&gt;d'onglets, de panels.&lt;/li&gt;
&lt;li&gt;de la coloration syntaxique, de la complétion.&lt;/li&gt;
&lt;li&gt;d'une tonnes de plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il n'y a évidemment pas encore autant de plugins que pour ST, mais ça
vient comme tu peux le voir &lt;a class="reference external" href="https://atom.io/packages"&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Convaincu ? Prêt pour l'installation ? C'est parti.&lt;/p&gt;
&lt;p&gt;Installe-le tout d'abord via les paquets proposés sur le
&lt;a class="reference external" href="https://atom.io/"&gt;site officiel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Avant de l'exécuter, on va installer une série de plugins qui va te permettre
de développer dans de bonnes conditions. Ces plugins vont être:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/atom-minimap/minimap"&gt;minimap&lt;/a&gt;, qui est un
aperçu du code sous forme de minimap à la manière de ST.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/atom-community/autocomplete-paths"&gt;autocomplete-paths&lt;/a&gt;,
qui permet d'activer la complétion des chemins des dossiers et fichiers de ton
système.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sadovnychyi/autocomplete-python"&gt;autocomplete-python&lt;/a&gt;,
qui est le plugin le plus fiable pour la complétion Python, basé sur
&lt;a class="reference external" href="http://jedi.jedidjah.ch/en/latest/"&gt;jedi&lt;/a&gt;. Pour activer la complétion des
librairies présentes dans ton virtualenv, il suffit de lancer atom depuis ton
virtualenv.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/atom-community/linter"&gt;linter&lt;/a&gt;, qui permet de visualiser
les erreurs de syntaxe &lt;a class="reference external" href="http://atomlinter.github.io/"&gt;de nombreux langages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/AtomLinter/linter-flake8"&gt;linter-flake8&lt;/a&gt; comme linter python.
On aurait pu en utiliser un autre, comme
&lt;a class="reference external" href="https://github.com/AtomLinter/linter-pylint"&gt;linter-pylint&lt;/a&gt;, mais je
le trouve trop verbeux.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/emmetio/emmet-atom"&gt;emmet&lt;/a&gt; pour le développement HTML et
CSS.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/akonwi/git-plus"&gt;git-plus&lt;/a&gt;, qui permet d'utiliser toutes
les commandes git depuis Atom.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/smashwilson/merge-conflicts"&gt;merge-conflicts&lt;/a&gt;, qui est un
bon helper lors des &lt;em&gt;git merge&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/tombell/travis-ci-status"&gt;travis-ci-status&lt;/a&gt;, pour
afficher le status de &lt;a class="reference external" href="https://travis-ci.org/"&gt;travis&lt;/a&gt; dans la barre de
status d'Atom.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kevinsawicki/monokai"&gt;monokai&lt;/a&gt;, pour obtenir un thème
proche de ST.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/abe33/atom-pigments"&gt;pigments&lt;/a&gt;, pour afficher les
couleurs dans les fichiers CSS, LESS et autres.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/thomaslindstrom/color-picker"&gt;color-picker&lt;/a&gt;, pour choisir
une couleur HTML via &lt;em&gt;ctrl+alt+c&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/richrace/highlight-selected"&gt;highlight-selected&lt;/a&gt;, qui,
lors du double-clique sur un mot, met en surbrillance tous les mots
correspondants, comme ST.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Glavin001/atom-beautify"&gt;atom-beautify&lt;/a&gt;, qui permet
d'indenter automatiquement le code de nombreux langages pour améliorer la
lisibilité.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Lukasa/language-restructuredtext"&gt;language-restructuredtext&lt;/a&gt;,
qui active la coloration syntaxique des fichiers &lt;em&gt;.rst&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il en existe d'autres qui pourrait t'intéresser, comme
&lt;a class="reference external" href="https://github.com/atom/vim-mode"&gt;vim-mode&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/jeremyramin/terminal-plus"&gt;terminal-plus&lt;/a&gt;, ou encore
&lt;a class="reference external" href="https://github.com/danielbrodin/atom-project-manager"&gt;project-manager&lt;/a&gt;, à toi
de faire ton marché!&lt;/p&gt;
&lt;p&gt;Atom propose un outil en ligne de
commande, &lt;strong&gt;apm&lt;/strong&gt;, qui permet d'installer des plugins sans passer par le menu
&lt;em&gt;Settings&lt;/em&gt; d'Atom. On installe donc les plugins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apm install minimap
apm install autocomplete-paths
pip install jedi
apm install autocomplete-python
apm install linter
pip install flake8
apm install linter-flake8
apm install emmet
apm install git-plus
apm install merge-conflicts
apm install travis-ci-status
apm install monokai
apm install pigments
apm install color-picker
apm install highlight-selected
apm install atom-beautify
apm install language-restructuredtext
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux maintenant lancer Atom via la commande:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;atom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On commence par définir la tabulation comme étant 4 espaces pour être compatible
&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0008/"&gt;pep8&lt;/a&gt; dans
&lt;em&gt;Edit-&amp;gt;Preferences-&amp;gt;Settings&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Tab Length
4
&lt;/pre&gt;
&lt;p&gt;Puis on active le thème Monokai installé précédemment via
&lt;em&gt;Edit-&amp;gt;Preferences-&amp;gt;Theme&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Syntax Theme
Monokai
&lt;/pre&gt;
&lt;p&gt;Et c'est fini! Tout est prêt pour commencer le développement de tes applications
Python et Django.&lt;/p&gt;
&lt;p&gt;Tu peux alors créer tes propres
&lt;a class="reference external" href="https://atom.io/docs/latest/using-atom-snippets"&gt;snippets&lt;/a&gt; en éditant le
fichier &lt;em&gt;snippets.cson&lt;/em&gt; du répertoire &lt;em&gt;~/.atom&lt;/em&gt; de cette manière par exemple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s1"&gt;&amp;#39;.source.js&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;console.log&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;console.log(${1:&amp;quot;crash&amp;quot;});$2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Utilise &lt;em&gt;alt+shift+s&lt;/em&gt; pour rechercher tes snippets.&lt;/p&gt;
&lt;p&gt;Enfin tu vas également pouvoir sauvegarder ta configuration sur Github de &lt;a class="reference external" href="https://github.com/dotmobo/dotatom"&gt;cette
manière&lt;/a&gt; par exemple.&lt;/p&gt;
</summary><category term="sublime text"></category><category term="python"></category><category term="atom"></category><category term="éditeur"></category><category term="github"></category><category term="code"></category></entry><entry><title>Générer son site statique grâce à Pelican</title><link href="http://dotmobo.github.io/pelican.html" rel="alternate"></link><updated>2015-10-11T00:00:00+02:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-11:pelican.html</id><summary type="html">&lt;img alt="Pelican" class="align-right" src="./images/pelican.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; est un outil vraiment chouette pour
générer rapidement un site statique comme un blog, afin de le publier via
&lt;a class="reference external" href="https://pages.github.com"&gt;Github Pages&lt;/a&gt; par exemple.&lt;/p&gt;
&lt;p&gt;C'est une alternative Python à &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; (qui lui est
écrit en Ruby), permettant de rédiger ses articles en Markdown. La
principale force de Pelican, c'est de proposer également le &lt;a class="reference external" href="http://sphinx-doc.org/rest.html"&gt;reStructuredText&lt;/a&gt; comme format d'écriture, ce qui rendra
heureux tous les amoureux de Sphinx.&lt;/p&gt;
&lt;p&gt;Pour l'installer, rien de plus simple, l'outil est dispo sur &lt;a class="reference external" href="https://pypi.python.org/pypi"&gt;Pypi&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il propose une commande de génération automatique de projet :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/dev/myblog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/dev/myblog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;N'oublie pas de dire oui aux deux questions concernant Github Pages,
et ... c'est tout! Pour proposer des articles, il te suffit de les créer en .rst
dans le dossier &lt;em&gt;content&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi ~/dev/myblog/content/mon-article.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ils devront ressembler à ça:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;Mon article&lt;/span&gt;
&lt;span class="gh"&gt;###########&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2015-10-11 10:20&lt;/span&gt;
&lt;span class="nc"&gt;:modified:&lt;/span&gt; &lt;span class="nf"&gt;2015-11-04 18:40&lt;/span&gt;
&lt;span class="nc"&gt;:tags:&lt;/span&gt; &lt;span class="nf"&gt;python,django&lt;/span&gt;
&lt;span class="nc"&gt;:category:&lt;/span&gt; &lt;span class="nf"&gt;Développement&lt;/span&gt;
&lt;span class="nc"&gt;:slug:&lt;/span&gt; &lt;span class="nf"&gt;mon-article&lt;/span&gt;
&lt;span class="nc"&gt;:authors:&lt;/span&gt; &lt;span class="nf"&gt;Toi&lt;/span&gt;
&lt;span class="nc"&gt;:summary:&lt;/span&gt; &lt;span class="nf"&gt;Mon article concerne blablabla&lt;/span&gt;

blablabla ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jetons maintenant un coup d'oeil aux deux fichiers de configuration.&lt;/p&gt;
&lt;p&gt;Le premier, &lt;em&gt;pelicanconf.py&lt;/em&gt; , est utilisé pour la configuration générale du site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;myusername&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;myblog&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Europe/Paris&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;fr&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c"&gt;# Social widget&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c"&gt;# Uncomment following line if you want document-relative URLs when developing&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Theme&lt;/span&gt;
&lt;span class="c"&gt;# THEME = &amp;quot;simple&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu remarqueras une partie &lt;em&gt;Theme&lt;/em&gt;, on y reviendra plus tard.
Le reste est relativement compréhensible pour se passer d'explication.&lt;/p&gt;
&lt;p&gt;Le second, &lt;em&gt;publishconf.py&lt;/em&gt; , rajoute les spécificités pour la production:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="c"&gt;# This file is only used if you use `make publish` or&lt;/span&gt;
&lt;span class="c"&gt;# explicitly specify it as your config file.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelicanconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://myusername.github.io&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/all.atom.xml&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Following items are often useful when publishing&lt;/span&gt;

&lt;span class="c"&gt;#DISQUS_SITENAME = &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#GOOGLE_ANALYTICS = &amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il est important ici de définir &lt;strong&gt;SITEURL&lt;/strong&gt; et &lt;strong&gt;FEED_ATOM&lt;/strong&gt;.
En effet, en mode dev, on n'a pas besoin de générer les flux atom et on utilise
des urls relatives.&lt;/p&gt;
&lt;p&gt;Si besoin, tu noteras une compatibilité avec Google Analytics.
Et concernant Disqus, on y reviendra également plus tard.&lt;/p&gt;
&lt;p&gt;Pelican propose alors tout un tas de commandes pour générer et déployer ton site.
Au choix, on va pouvoir utiliser &lt;a class="reference external" href="http://www.fabfile.org"&gt;Fabric&lt;/a&gt;
(malheureusement non disponible en Python 3) ou &lt;strong&gt;make&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pour générer ton site en mode dev (utilise &lt;em&gt;pelicanconf.py&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux aussi utiliser un watcher pour automatiser la génération de ton site à chaque modification:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make regenerate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour servir ton site en mode dev sur &lt;a class="reference external" href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make serve
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour générer ton site pour la production (utilise &lt;em&gt;publishconf.py&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make publish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enfin, pour le diffuser sur le master de ton dépôt Github Pages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Concernant le dépôt Github, je te recommande de commiter le code Pelican sur une
branche à part, et de garder la branche &lt;em&gt;master&lt;/em&gt; pour la diffusion du site.
Ton dépôt devra s'appeler &lt;em&gt;&amp;lt;username&amp;gt;.github.io&lt;/em&gt; pour être compatbile avec
Github Pages.&lt;/p&gt;
&lt;p&gt;Par défaut, le design peut sembler austère.&lt;/p&gt;
&lt;p&gt;C'est pourquoi on va installer un &lt;a class="reference external" href="http://pelicanthemes.com/"&gt;thème&lt;/a&gt; un peu
plus moderne utilisant &lt;a class="reference external" href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, comme
&lt;a class="reference external" href="https://github.com/nairobilug/pelican-alchemy"&gt;alchemy&lt;/a&gt; par exemple.&lt;/p&gt;
&lt;p&gt;La plupart des thèmes disponibles sont sous licence MIT, donc n'hésite pas à les
forker pour y apporter tes customisations.&lt;/p&gt;
&lt;p&gt;Pour les habitués de &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; et
&lt;a class="reference external" href="http://flask.pocoo.org/"&gt;flask&lt;/a&gt;, Pelican utilise &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;jinja2&lt;/a&gt;
comme moteur de template. Et ça c'est carrément cool.&lt;/p&gt;
&lt;p&gt;On installe donc alchemy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@github.com:nairobilug/pelican-alchemy.git ~/dev/pelican-alchemy
pelican-themes -i ~/dev/pelican-alchemy/alchemy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et on définit la variable &lt;strong&gt;THEME&lt;/strong&gt; de notre fichier de conf &lt;em&gt;pelicanconf.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;alchemy&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITE_SUBTEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Blabla&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PROFILE_IMAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;profil.jpeg&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/myusername&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;TWITTER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://twitter.com/myusername&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_FAVICON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;LICENSE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MIT&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LICENSE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://opensource.org/licenses/MIT&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;MENU_ITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;META_DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Blabla&lt;/span&gt;
&lt;span class="n"&gt;PAGES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;CATEGORIES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;TAGS_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SHOW_ARTICLE_AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Concernant les paramètres optionnels, je t'invite à regarder la doc d'alchemy.&lt;/p&gt;
&lt;p&gt;&amp;quot;Ok, avoir un blog statique, c'est bien sympa, mais comment je fais pour avoir
des commentaires? Il me faut bien une partie dynamique non ?&amp;quot;. Pas de panique,
&lt;a class="reference external" href="https://disqus.com"&gt;Disqus&lt;/a&gt; est là pour ça.&lt;/p&gt;
&lt;p&gt;Il te suffit de te créer un compte sur Disqus et d'y enregistrer ton site en
utilisant le paramétrage &lt;strong&gt;universal-embed-code&lt;/strong&gt;. À partir de là, tu vas pouvoir
le configurer via &lt;em&gt;http://&amp;lt;username&amp;gt;.disqus.com/admin/settings&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Enfin, tu l'actives via ton fichier de conf de prod &lt;em&gt;publishconf.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;myusername&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu commites tout ça, tu publies et hop! Ton blog est complètement prêt!&lt;/p&gt;
&lt;p&gt;Et si tu veux pousser un peu plus loin l'outil, il y a énormément de
&lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;plugins&lt;/a&gt; disponibles.&lt;/p&gt;
</summary><category term="pelican"></category><category term="python"></category><category term="jekyll"></category><category term="blog"></category><category term="github"></category></entry><entry><title>Bienvenue, ami(e) développeur(euse)!</title><link href="http://dotmobo.github.io/bienvenue.html" rel="alternate"></link><updated>2015-10-10T00:00:00+02:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-10:bienvenue.html</id><summary type="html">&lt;p&gt;Tu trouveras sur ce blog tout un tas de trucs concernant le développement en général.&lt;/p&gt;
&lt;p&gt;J'y aborderai principalement tout ce qui touche de près ou de loin à l'univers de &lt;a class="reference external" href="https://www.python.org/"&gt;python&lt;/a&gt; et &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;django&lt;/a&gt;, en présentant des outils et librairies sympas et des trucs et astuces.&lt;/p&gt;
&lt;p&gt;Mais ça ne m’empêchera pas, de temps à autres, de lorgner du côté d'autres langages si je tombe sur d'intéressantes découvertes.&lt;/p&gt;
&lt;p&gt;Bonne lecture à tous.&lt;/p&gt;
</summary><category term="bienvenue"></category><category term="présentation"></category></entry></feed>