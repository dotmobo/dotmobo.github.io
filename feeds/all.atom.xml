<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>.mobo</title><link href="http://dotmobo.github.io/" rel="alternate"></link><link href="http://dotmobo.github.io/feeds/all.atom.xml" rel="self"></link><id>http://dotmobo.github.io/</id><updated>2016-03-03T00:00:00+01:00</updated><entry><title>Programmation fonctionnelle avec PyToolz</title><link href="http://dotmobo.github.io/pytoolz.html" rel="alternate"></link><updated>2016-03-03T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2016-03-03:pytoolz.html</id><summary type="html">&lt;img alt="Python" class="align-right" src="./images/python.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://toolz.readthedocs.org/en/latest/index.html"&gt;PyToolz&lt;/a&gt; est un ensemble
de fonctions qui étendent &lt;em&gt;itertools&lt;/em&gt; et &lt;em&gt;functools&lt;/em&gt; de la librairie
standard. Ainsi, il va te permettre d'utiliser les
paradigmes de la programmation fonctionnelle en python.&lt;/p&gt;
&lt;p&gt;Ce qui est sympa avec &lt;em&gt;PyToolz&lt;/em&gt;, c'est qu'il est écrit en pur python et ne
dépend donc d'aucune librairie externe. De plus, il est compatible python 3.&lt;/p&gt;
&lt;p&gt;Comme le veut la programmation fonctionnelle, les fonctions proposées sont
&lt;em&gt;composable&lt;/em&gt;, &lt;em&gt;pure&lt;/em&gt; et &lt;em&gt;lazy&lt;/em&gt;. Si tout ça ne te parle pas, je t'invite à lire
le livre &amp;quot;&lt;a class="reference external" href="http://lyah.haskell.fr/"&gt;Apprendre Haskell vous fera le plus grand bien !&lt;/a&gt;&amp;quot;
pour te plonger dans l'univers de la programmation fonctionnelle.
Même si tu ne comptes pas développer en &lt;a class="reference external" href="https://www.haskell.org/"&gt;Haskell&lt;/a&gt;,
il est intéressant d'en comprendre les concepts.&lt;/p&gt;
&lt;p&gt;Mais retournons à &lt;em&gt;PyToolz&lt;/em&gt;. Comme d'hab, tu l'installes avec pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install toolz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et tu peux maintenant utiliser toutes les méthodes de
&lt;a class="reference external" href="http://toolz.readthedocs.org/en/latest/api.html#itertoolz"&gt;Itertoolz&lt;/a&gt;,
&lt;a class="reference external" href="http://toolz.readthedocs.org/en/latest/api.html#functoolz"&gt;Functoolz&lt;/a&gt; et
&lt;a class="reference external" href="http://toolz.readthedocs.org/en/latest/api.html#dicttoolz"&gt;Dictoolz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Itertoolz&lt;/em&gt; te permettra, par exemple, de retirer les éléments pairs d'une liste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toolz.itertoolz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;De récupérer les deux premiers éléments d'une liste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toolz.itertoolz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;De partitionner une liste d'éléments en liste de tuples de deux éléments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toolz.itertoolz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou encore de retourner les différences entre deux listes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toolz.itertoolz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pommes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;poires&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bananes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pommes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;poires&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;oranges&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bananes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;oranges&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;PyToolz&lt;/em&gt; propose également la version &lt;em&gt;curryfiée&lt;/em&gt; des différentes
fonctions pour en effectuer des applications partielles. Ici, on crée les
fonctions &lt;strong&gt;remove_even&lt;/strong&gt; et &lt;strong&gt;take_two&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toolz.curried&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;remove_even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remove_even&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;take_two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;take_two&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et maintenant, place au fun avec &lt;strong&gt;functoolz&lt;/strong&gt; ! Comme en &lt;em&gt;shell&lt;/em&gt;, tu vas
pouvoir &lt;em&gt;piper&lt;/em&gt; tes fonctions. Disons que tu veuilles les deux premiers
éléments non paires d'une liste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toolz.curried&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toolz.functoolz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pipe&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;remove_even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;take_two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;remove_even&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;take_two&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plutôt cool non ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dictoolz&lt;/strong&gt;, quand à lui, permet entre autres de fusionner des dictionnaires:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toolz.dicttoolz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou d'appliquer une fonction aux valeurs d'un dictionnaire:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;toolz.dicttoolz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;valmap&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bills&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;valmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bills&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il y a évidemment tout un tas d'autres fonctions disponibles que je t'invite à découvrir !&lt;/p&gt;
&lt;p&gt;Sinon, si tu veux pousser une peu plus loin la programmation fonctionnelle avec
python, il existe un langage intéressant appelé &lt;a class="reference external" href="https://github.com/i2y/mochi"&gt;Mochi&lt;/a&gt;, dont l'interpréteur
convertit le code Mochi en bytecode Python 3.&lt;/p&gt;
&lt;p&gt;Il permet d'écrire notamment ce genre de chose:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fizzbuzz&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fizz&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;buzz&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pvector&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;À découvrir !&lt;/p&gt;
</summary><category term="python"></category><category term="pytoolz"></category><category term="programmation fonctionnelle"></category><category term="fonctions"></category><category term="mochi"></category><category term="pipe"></category><category term="curry"></category></entry><entry><title>Retour du FOSDEM 2016</title><link href="http://dotmobo.github.io/fosdem2016.html" rel="alternate"></link><updated>2016-02-04T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2016-02-04:fosdem2016.html</id><summary type="html">&lt;img alt="FOSDEM" class="align-right" src="./images/fosdem.png" /&gt;
&lt;p&gt;Le &lt;a class="reference external" href="https://fosdem.org/"&gt;FOSDEM&lt;/a&gt; est un événement qui a lieu chaque année à
&lt;a class="reference external" href="http://www.ulb.ac.be/"&gt;l'Université Libre de Bruxelles&lt;/a&gt;.
Il permet de rencontrer d'autres développeurs, d'animer et
d'assister à des conférences, de partager des idées et des bières, et de
découvrir les nouvelles technos sympas du moment.&lt;/p&gt;
&lt;p&gt;Cette année, c'était noir de monde ! Plus de 7900 développeurs et sysadmins étaient
présents !&lt;/p&gt;
&lt;p&gt;Je vais te faire un bref petit retour des confs qui m'ont marqué et des technos
à suivre.&lt;/p&gt;
&lt;div class="section" id="systemd"&gt;
&lt;h2&gt;Systemd&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;par Lennart Poettering&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Ça y est, &lt;em&gt;systemd&lt;/em&gt; est officiellement installé par défaut dans toutes les plus
grosses distros linux (sauf gentoo).&lt;/p&gt;
&lt;p&gt;Si tu es sous linux, tu vas obligatoirement devoir te pencher dessus.
C'est grosso-modo un &lt;em&gt;daemon&lt;/em&gt; qui va te permettre de gérer tes services
(apache, postgres et autres) via la commande &lt;strong&gt;systemctl&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Je ne vais pas m'éterniser dessus, car il y a déjà pas mal d'articles sur le sujet,
comme &lt;a class="reference external" href="http://linuxfr.org/news/systemd-l-init-martyrise-l-init-bafoue-mais-l-init-libere"&gt;celui-ci&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="docker-for-developers"&gt;
&lt;h2&gt;Docker for developers&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;par Michael Hrivnak&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Bon, n'y allons pas par quatres chemins, &lt;a class="reference external" href="https://www.docker.com/"&gt;docker&lt;/a&gt; est
clairement &lt;strong&gt;LA&lt;/strong&gt; techno en vogue du moment. La salle était pleine à craquer, et
il y avait facilement autant de gens à l'intérieur qu'à l'extérieur. J'avais
l'impression que les organisateurs ne s'attendaient pas à ça !&lt;/p&gt;
&lt;p&gt;C'est un outil écrit en go et développé par Solomon Kykes, qui permet de gérer
des conteneurs LXC et d'y déployer des applications.&lt;/p&gt;
&lt;p&gt;On a pu voir ici l'utilisation quotidienne de docker pour un développeur, sans
évoquer les questions de déploiement.&lt;/p&gt;
&lt;p&gt;Note : on me chuchote à l'oreille que &lt;a class="reference external" href="https://github.com/fgrehm/vagrant-lxc"&gt;vagrant-lxc&lt;/a&gt;
pourrait également faire l'affaire. À méditer donc !&lt;/p&gt;
&lt;div class="section" id="pour-les-tests-unitaires"&gt;
&lt;h3&gt;Pour les tests unitaires&lt;/h3&gt;
&lt;p&gt;L'idée, c'est d'utiliser une image docker pour chaque combinaison
d'environnements. En python, on a déjà les &lt;em&gt;virtualenvs&lt;/em&gt; qui nous
permettent de tester diverses combinaisons d'interpréteurs et de librairies
python via &lt;em&gt;tox&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Grâce à docker, on va en plus pouvoir tester nos applications dans différents
environnements linux (debian, gentoo, etc...).&lt;/p&gt;
&lt;p&gt;Il suffit de créer un &lt;em&gt;Dockerfile&lt;/em&gt; qui va :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;utiliser la bonne distro.&lt;/li&gt;
&lt;li&gt;installer les paquets systèmes et les paquets python nécessaires.&lt;/li&gt;
&lt;li&gt;monter notre code dans &lt;em&gt;/code&lt;/em&gt; par exemple.&lt;/li&gt;
&lt;li&gt;exécuter les tests unitaires depuis le conteneur.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pour-la-base-de-donnees-de-dev"&gt;
&lt;h3&gt;Pour la base de données de dev&lt;/h3&gt;
&lt;p&gt;En utilisant des conteneurs pour tes bases de données, tu peux facilement
tester une migration de postgres 9.4 en 9.5 par exemple, sans pourrir ton système.
Tu démarres un nouveau conteneur postgres 9.5, tu y fais tes tests de migration
et tu la détruis, tout simplement.&lt;/p&gt;
&lt;p&gt;Tes tests unitaires pourront également utiliser une base de données dans un
conteneur, ce qui te permettra d'éviter de manipuler du &lt;em&gt;sqlite&lt;/em&gt; ou une base en
mémoire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pour-diffuser-une-application-de-demo"&gt;
&lt;h3&gt;Pour diffuser une application de démo&lt;/h3&gt;
&lt;p&gt;Ce n'est pas forcément évident de &lt;em&gt;containeriser&lt;/em&gt; une application de prod.
Il faut notamment penser à la gestion des mots de passe et des certificats.&lt;/p&gt;
&lt;p&gt;Mais pour diffuser une application de démo, tu peux passer outre ces questions !
Tu vas ainsi éviter à tes utilisateurs d'installer toute une application sur leur
système, en leur proposant juste de démarrer un conteneur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pour-les-serveurs-http"&gt;
&lt;h3&gt;Pour les serveurs http&lt;/h3&gt;
&lt;p&gt;L'idée est la même que pour les bases de données. Tu peux installer et tester
&lt;em&gt;nginx&lt;/em&gt;, &lt;em&gt;apache&lt;/em&gt; et &lt;em&gt;lighttpd&lt;/em&gt; dans des conteneurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pour-faker-des-api"&gt;
&lt;h3&gt;Pour faker des API&lt;/h3&gt;
&lt;p&gt;À la place de &lt;em&gt;mocker&lt;/em&gt; les réponses de tes API dans tes tests unitaires, tu
peux déployer tes API de test dans un conteneur et les utiliser directement dans
tes tests unitaires.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="guix-tox"&gt;
&lt;h2&gt;Guix-tox&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;par Cyril Roelandt&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/guix/"&gt;Guix&lt;/a&gt; est un gestionnaire fonctionnel de
paquets pour le système GNU.&lt;/p&gt;
&lt;p&gt;Il fonctionne pour tous les langages. Ainsi, il permettrait d'éviter d'utiliser
des gestionnaires de paquets spécifiques aux langages, comme pip, npm, cpan.&lt;/p&gt;
&lt;p&gt;Il utilise le langage &lt;a class="reference external" href="http://www.gnu.org/software/guile/"&gt;guile&lt;/a&gt;, qui est
une implémentation de &lt;a class="reference external" href="http://schemers.org/"&gt;scheme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dans guix, on a entre autres la possibilité d'utiliser des conteneurs, de gérer
des profils, de revenir en arrière.&lt;/p&gt;
&lt;p&gt;Je t'invite à lire &lt;a class="reference external" href="http://matutine.cmoi.cc/2015/11/14/installer-guix-le-gestionnaire-de-paquets-distro-venv-universel-et-container.html"&gt;l'article de Matutine&lt;/a&gt;
qui explique bien l'idée générale.&lt;/p&gt;
&lt;p&gt;Et du coup, &lt;a class="reference external" href="https://git.framasoft.org/Steap/guix-tox"&gt;guix-tox&lt;/a&gt; est tout
simplement un fork de tox qui remplace les &lt;em&gt;virtualenvs&lt;/em&gt; python par guix.&lt;/p&gt;
&lt;p&gt;Tu vas ainsi pouvoir tester ton application dans un environnement système
complet, ce qui rejoint l'idée précédemment évoquée avec docker.&lt;/p&gt;
&lt;p&gt;Le débat entre guix, docker et vagrant reste ouvert !&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pulp"&gt;
&lt;h2&gt;Pulp&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;par Michael Hrivnak&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.pulpproject.org/"&gt;Pulp&lt;/a&gt; est un projet qui permet de gérer ses propres
dépôts. On va ainsi pouvoir héberger son propre pypi, synchroniser les dépôts
entre eux et y uploader nos paquets.&lt;/p&gt;
&lt;p&gt;C'est compatible avec les paquets debian, rpm, python, docker et autres.
Franchement, ça semble plutôt bien foutu et pratique!&lt;/p&gt;
&lt;p&gt;Pour finir, merci à toute l'équipe du FOSDEM et à l'année prochaine !&lt;/p&gt;
&lt;/div&gt;
</summary><category term="fosdem"></category><category term="2016"></category><category term="python"></category><category term="docker"></category><category term="containers"></category><category term="pulp"></category><category term="guix"></category><category term="tox"></category><category term="systemd"></category></entry><entry><title>Se passer de Grunt/Gulp/Brunch/Broccoli/Mimosa/Jake grâce à Make</title><link href="http://dotmobo.github.io/makefile-frontend.html" rel="alternate"></link><updated>2016-01-12T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2016-01-12:makefile-frontend.html</id><summary type="html">&lt;img alt="Gnu" class="align-right" src="./images/gnu.png" /&gt;
&lt;p&gt;La communauté &lt;a class="reference external" href="https://nodejs.org"&gt;Node.js&lt;/a&gt; a été plutôt productive ces deux
dernières années, notamment au niveau de la création de &lt;em&gt;tasks runners&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Certains sont enthousiastes de cet essor et de cette profusion d'outils,
mais d'autres le sont beaucoup moins &lt;a class="reference external" href="https://medium.com/&amp;#64;wob/the-sad-state-of-web-development-1603a861d29f#.nrikd9bai"&gt;et le font savoir&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tu as forcément déjà lu un article ou vu un bout de code qui mentionnait au choix &lt;a class="reference external" href="http://gruntjs.com/"&gt;grunt&lt;/a&gt;,
&lt;a class="reference external" href="http://gulpjs.com/"&gt;gulp&lt;/a&gt;, &lt;a class="reference external" href="http://brunch.io/"&gt;brunch&lt;/a&gt;, &lt;a class="reference external" href="http://broccolijs.com/"&gt;broccoli&lt;/a&gt;,
&lt;a class="reference external" href="http://mimosa.io/"&gt;mimosa&lt;/a&gt;, &lt;a class="reference external" href="http://jakejs.com/"&gt;jake&lt;/a&gt; ou que sais-je.&lt;/p&gt;
&lt;p&gt;Mais lequel utiliser ? Pourquoi y en a-t-il autant ? Quel est le plus simple ? Le plus performant ? Le plus suivi ?
Quel tuto suivre ?&lt;/p&gt;
&lt;p&gt;Franchement, devoir ré-apprendre un &lt;em&gt;tasks runners&lt;/em&gt; tous les trois mois en fonction de la mode,
c'est plutôt lourd. Et ça rappelle fortement le choix cornélien du framework ou de la librairie javascript (
&lt;a class="reference external" href="https://angularjs.org/"&gt;angular&lt;/a&gt;, &lt;a class="reference external" href="https://angular.io/"&gt;angular2&lt;/a&gt;, &lt;a class="reference external" href="https://facebook.github.io/react/"&gt;react&lt;/a&gt;,
&lt;a class="reference external" href="https://www.polymer-project.org/1.0/"&gt;polymer&lt;/a&gt;, &lt;a class="reference external" href="https://jquery.com/"&gt;jquery&lt;/a&gt;, &lt;a class="reference external" href="http://vuejs.org/"&gt;vue.js&lt;/a&gt;, etc...)&lt;/p&gt;
&lt;p&gt;N'y a-t-il pas un outil robuste, simple et pérenne ? Et qui pourrait te servir pour autre chose que du
développement frontend tant qu'à faire ? Et ben si, ça existe depuis la création de &lt;a class="reference external" href="https://www.gnu.org"&gt;GNU&lt;/a&gt; en 1983 par Richard
Stallman, et ça s'appelle &lt;a class="reference external" href="https://www.gnu.org/software/make/"&gt;Make&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Make&lt;/em&gt; est un outil qui permet d'automatiser la construction de fichiers et qui peut
jouer le rôle de &lt;em&gt;tasks runners&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Concrètement, en développement web, de quoi est-ce qu'on a le plus besoin ?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Compiler nos fichiers &lt;a class="reference external" href="http://lesscss.org/"&gt;LESS&lt;/a&gt; ou &lt;a class="reference external" href="http://sass-lang.com/"&gt;Sass&lt;/a&gt; en CSS.&lt;/li&gt;
&lt;li&gt;Minifier nos fichiers CSS.&lt;/li&gt;
&lt;li&gt;Compiler nos fichiers &lt;a class="reference external" href="http://livescript.net/"&gt;LiveScript&lt;/a&gt;, &lt;a class="reference external" href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; ou &lt;a class="reference external" href="http://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; en JavaScript.&lt;/li&gt;
&lt;li&gt;Minifier nos fichiers JavaScript.&lt;/li&gt;
&lt;li&gt;Avoir un &lt;em&gt;watcher&lt;/em&gt; qui lance automatiquement toutes ces tâches lorsqu'un fichier source est modifié.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On suppose que tu as :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;tes fichiers LESS dans &lt;strong&gt;static/src/less&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;tes fichiers LiveScript dans &lt;strong&gt;static/src/ls&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Et que tu veux tes fichiers compilés et minifiés dans &lt;strong&gt;static/dist/css&lt;/strong&gt; et &lt;strong&gt;static/dist/js&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;C'est parti, tu vas te créer un fichier &lt;strong&gt;Makefile&lt;/strong&gt; qui fera tous ça !&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vim Makefile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu y déclares tes répertoires de travail :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;LESS_FOLDER :&lt;span class="o"&gt;=&lt;/span&gt; static/src/less
LS_FOLDER :&lt;span class="o"&gt;=&lt;/span&gt; static/src/ls
CSS_FOLDER :&lt;span class="o"&gt;=&lt;/span&gt; static/dist/css
JS_FOLDER :&lt;span class="o"&gt;=&lt;/span&gt; static/dist/js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ensuite, tu y listes les fichiers concernés :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;LESS_FILES :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="p"&gt; find &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LESS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt; -type f -name &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.less&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
LS_FILES :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="p"&gt; find &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt; -type f -name &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.ls&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
CSS_FILE :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/main.min.css
JS_FILE :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/main.min.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;La commande &lt;strong&gt;find&lt;/strong&gt; utilisée pour &lt;em&gt;LESS_FILES&lt;/em&gt; et &lt;em&gt;LS_FILES&lt;/em&gt; permet de récupérer le
chemin de tous les fichiers LESS et LiveScript présents.&lt;/p&gt;
&lt;p&gt;Tu déclares une tâche &lt;em&gt;build&lt;/em&gt; qui sera chargée de lancer la compilation des fichiers :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;build: build-css build-js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Puis, tu commences par créer la tâche qui va compiler les fichiers LESS :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;build-css: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LESS_FILES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    cat &lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; lessc - &lt;span class="p"&gt;|&lt;/span&gt; cleancss &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;:
    mkdir -p &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ta tâche &lt;em&gt;build-css&lt;/em&gt; va créer le répertoire &lt;strong&gt;static/dist/css&lt;/strong&gt; via &lt;strong&gt;mkdir&lt;/strong&gt;.
Et elle va compiler tous les fichiers LESS à l'aide de &lt;strong&gt;lessc&lt;/strong&gt; et les minifier à
l'aide de &lt;strong&gt;cleancss&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Dans une &lt;strong&gt;Makefile&lt;/strong&gt;, &lt;em&gt;$^&lt;/em&gt; correspond à la liste des dépendances. Il s'agit ici
des fichiers contenus dans &lt;em&gt;LESS_FILES&lt;/em&gt;. &lt;em&gt;$&amp;#64;&lt;/em&gt; correspond au nom de la cible, à
savoir le fichier contenu dans &lt;em&gt;CSS_FILE&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De la même manière, tu crées la tâche qui va compiler les fichiers LiveScript :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;build-js: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LS_FILES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
cat &lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; lsc -sc &lt;span class="p"&gt;|&lt;/span&gt; uglifyjs - &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;:
mkdir -p &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Les fichiers LiveScript sont compilés à l'aide de &lt;strong&gt;lsc&lt;/strong&gt; et minifiés à l'aide
de &lt;strong&gt;uglifyjs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tu rajoutes une méthode pour nettoyer le répertoire &lt;em&gt;dist&lt;/em&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;clean:
    rm &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et une méthode qui te permettra d'installer les librairies utilisées par ton &lt;strong&gt;Makefile&lt;/strong&gt; via &lt;strong&gt;npm&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;install-dependencies:
    sudo npm install -g less clean-css livescript uglifyjs onchange
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enfin, tu vas mettre en place ton &lt;em&gt;watcher&lt;/em&gt; à l'aide de &lt;strong&gt;onchange&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;watch:
    onchange &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LESS_FILES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LS_FILES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -- make build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;La dernière instruction servira à dire à &lt;strong&gt;make&lt;/strong&gt; que certaines tâches
ne sont pas directement liées à des noms de fichiers :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.PHONY: build build-css build-js clean watch install-dependencies
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et c'est fini! Tu disposes désormais des commandes suivantes :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;make install-dependencies&lt;/strong&gt; : pour installer les dépendances.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make&lt;/strong&gt; ou &lt;strong&gt;make build&lt;/strong&gt; : pour compiler et minifier tous les fichiers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make build-js&lt;/strong&gt; : pour compiler et minifier les fichiers LiveScript.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make build-css&lt;/strong&gt; : pour compiler et minifier les fichiers LESS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make clean&lt;/strong&gt; : pour effacer les fichiers compilés et minifiés.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make watch&lt;/strong&gt; : pour relancer automatiquement la commande &lt;strong&gt;make build&lt;/strong&gt; à chaque modifications de fichiers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le résultat final :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#################################################&lt;/span&gt;
&lt;span class="c"&gt;# Compile and minify less and livescript files. #&lt;/span&gt;
&lt;span class="c"&gt;# Require node.js and npm                       #&lt;/span&gt;
&lt;span class="c"&gt;#################################################&lt;/span&gt;

LESS_FOLDER :&lt;span class="o"&gt;=&lt;/span&gt; static/src/less
LS_FOLDER :&lt;span class="o"&gt;=&lt;/span&gt; static/src/ls
CSS_FOLDER :&lt;span class="o"&gt;=&lt;/span&gt; static/dist/css
JS_FOLDER :&lt;span class="o"&gt;=&lt;/span&gt; static/dist/js

LESS_FILES :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="p"&gt; find &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LESS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt; -type f -name &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.less&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
LS_FILES :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="p"&gt; find &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt; -type f -name &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.ls&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
CSS_FILE :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/main.min.css
JS_FILE :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/main.min.js

&lt;span class="c"&gt;###############&lt;/span&gt;
&lt;span class="c"&gt;# Build files #&lt;/span&gt;
&lt;span class="c"&gt;###############&lt;/span&gt;

build: build-css build-js

&lt;span class="c"&gt;####################&lt;/span&gt;
&lt;span class="c"&gt;# Build css files #&lt;/span&gt;
&lt;span class="c"&gt;####################&lt;/span&gt;

build-css: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LESS_FILES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    cat &lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; lessc - &lt;span class="p"&gt;|&lt;/span&gt; cleancss &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;:
    mkdir -p &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="c"&gt;##################&lt;/span&gt;
&lt;span class="c"&gt;# Build js files #&lt;/span&gt;
&lt;span class="c"&gt;##################&lt;/span&gt;

build-js: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LS_FILES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    cat &lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; lsc -sc &lt;span class="p"&gt;|&lt;/span&gt; uglifyjs - &amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FOLDER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;:
    mkdir -p &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="c"&gt;###############&lt;/span&gt;
&lt;span class="c"&gt;# Clean files #&lt;/span&gt;
&lt;span class="c"&gt;###############&lt;/span&gt;

clean:
    rm &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CSS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JS_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;########################&lt;/span&gt;
&lt;span class="c"&gt;# Install dépendencies #&lt;/span&gt;
&lt;span class="c"&gt;########################&lt;/span&gt;

install-dependencies:
    sudo npm install -g less clean-css livescript uglifyjs onchange

&lt;span class="c"&gt;###############&lt;/span&gt;
&lt;span class="c"&gt;# Watch files #&lt;/span&gt;
&lt;span class="c"&gt;###############&lt;/span&gt;

watch:
    onchange &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LESS_FILES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LS_FILES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -- make build

&lt;span class="c"&gt;#########&lt;/span&gt;
&lt;span class="c"&gt;# Phony #&lt;/span&gt;
&lt;span class="c"&gt;#########&lt;/span&gt;

.PHONY: build build-css build-js clean watch install-dependencies
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Evidemment, ça reste un exemple très simple. Mais rien ne t'empêche de faire
évoluer ton &lt;strong&gt;Makefile&lt;/strong&gt; selon tes besoins.&lt;/p&gt;
&lt;p&gt;En plus, tu viens d'apprendre un outil qui te sera utile pour faire de l'administration système.&lt;/p&gt;
&lt;p&gt;Bonne compilation !&lt;/p&gt;
</summary><category term="frontend"></category><category term="make"></category><category term="makefile"></category><category term="javascript"></category><category term="livescript"></category><category term="less"></category><category term="css"></category><category term="compile"></category><category term="node.js"></category></entry><entry><title>Templating avec Mako</title><link href="http://dotmobo.github.io/mako.html" rel="alternate"></link><updated>2015-12-23T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-12-23:mako.html</id><summary type="html">&lt;img alt="Mako" class="align-right" src="./images/mako.png" /&gt;
&lt;p&gt;&lt;em&gt;Python is a great scripting language. Don't reinvent the wheel...
your templates can handle it !&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Je suis tombé sur &lt;a class="reference external" href="http://www.makotemplates.org/"&gt;mako&lt;/a&gt; suite à une discussion
mouvementée au sujet de &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; et de
&lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;jinja&lt;/a&gt; avec un de mes collègues pro
&lt;a class="reference external" href="http://www.groovy-lang.org/"&gt;groovy&lt;/a&gt;/&lt;a class="reference external" href="https://grails.org/"&gt;grails&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ça devait ressembler à quelque-chose comme ça:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;- Rhhaaa je déteste jinja, j'suis obligé d'me taper la doc pour apprendre toute la syntaxe! En plus c'est grave limité! Y a pas moyen d'y écrire directement du python ?&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;- Bah ça va, c'est pas trop compliqué, et si t'as besoin d'utiliser des méthodes python, tu peux utiliser les custom filters et custom tags!&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;- Uai mais c'est pas super pratique, avec grails tu peux directement mettre du groovy dans tes templates, c'est génial blablabla&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;- Ok ok j'ai compris, jinja te convient pas, mais j'suis sûr que ce que tu cherches existe dans la communauté python! Voyons voir ... regardes, y a un truc là, ça s'appelle mako!&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;- *Yeux qui brillent*&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mako est un moteur de template utilisé dans le framework
&lt;a class="reference external" href="http://www.pylonsproject.org/"&gt;pyramid&lt;/a&gt;, à l'instar de jinja utilisé dans django.
Il est réputé pour sa performance, et est même utilisé pour l'affichage des pages
de &lt;a class="reference external" href="https://www.reddit.com/"&gt;reddit&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Mais son principal atout est de pouvoir utiliser directement du python à l'aide
des balises &lt;strong&gt;&amp;lt;% %&amp;gt;&lt;/strong&gt; dans les templates.&lt;/p&gt;
&lt;p&gt;Certains diront que c'est pas génial, car on peut vite obtenir des templates
assez crades avec tout et n'importe quoi dedans.
D'autres diront que ça ne sert à rien d'inventer une nouvelle syntaxe spécifique
aux templates, alors que python est disponible et peut faire ça très bien.&lt;/p&gt;
&lt;p&gt;Pour te faire ton propre avis, installes-le via pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install mako
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En résumé, tes templates ressembleront à ça:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="n"&gt;inherit&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;base.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;makerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;%&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;makerow(row)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;\
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/%&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;La syntaxe de mako est très bien expliquée dans la
&lt;a class="reference external" href="http://docs.makotemplates.org/en/latest/syntax.html"&gt;doc officielle&lt;/a&gt;,
mais pour faire simple :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;La substitution d'expressions utilise le symbole &lt;strong&gt;${}&lt;/strong&gt;, à la manière de perl.&lt;/li&gt;
&lt;li&gt;Tu disposes de &lt;a class="reference external" href="http://docs.makotemplates.org/en/latest/filtering.html"&gt;filtres&lt;/a&gt; comme sous jinja, via une syntaxe type &lt;strong&gt;${&amp;quot;this is some text&amp;quot; | u}&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Il y a les structures de contrôle classiques &lt;strong&gt;% if&lt;/strong&gt; et &lt;strong&gt;% else&lt;/strong&gt; et les boucles avec &lt;strong&gt;% for&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Divers tags sont disponibles comme &lt;strong&gt;&amp;lt;%inhérit/&amp;gt;&lt;/strong&gt;, &lt;strong&gt;&amp;lt;%page/&amp;gt;&lt;/strong&gt;, &lt;strong&gt;&amp;lt;%include/&amp;gt;&lt;/strong&gt;, etc ...&lt;/li&gt;
&lt;li&gt;Tu peux rajouter des commentaires avec &lt;strong&gt;##&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Enfin, tout ce qui se trouve entre &lt;strong&gt;&amp;lt;% %&amp;gt;&lt;/strong&gt; est du python. Tu peux profiter de toute la syntaxe de python et même importer des libs. C'est la fête !&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Et pour l'utiliser, rien de plus simple, tu utilises la classe &lt;strong&gt;Template&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="n"&gt;mytemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello, ${name}!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux désormais utiliser mako pour gérer tes pages html! Et si tu es un
utilisateur de django, il t'es même possible de remplacer jinja par mako via
&lt;a class="reference external" href="https://github.com/doconix/django-mako-plus"&gt;django-mako-plus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En dehors des pages html, tu peux également l'utiliser &lt;a class="reference external" href="http://stackoverflow.com/questions/3049188/generating-very-large-xml-files-in-python"&gt;pour générer d'énormes
fichiers XML simples&lt;/a&gt;,
comme une liste d'utilisateurs par exemple.
Ça évite de manipuler le DOM en mémoire comme avec &lt;a class="reference external" href="http://lxml.de/"&gt;lxml&lt;/a&gt;,
c'est plus facile d'accès que &lt;a class="reference external" href="https://docs.python.org/3/library/xml.sax.html"&gt;SAX&lt;/a&gt;,
et c'est très performant :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mako.runtime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;

&lt;span class="n"&gt;tpl_xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;doc&amp;gt;&lt;/span&gt;
&lt;span class="si"&gt;% f&lt;/span&gt;&lt;span class="s"&gt;or i in data:&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;p&amp;gt;${i}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s"&gt;ndfor&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;/doc&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;tpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tpl_xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;output.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;tpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="template"></category><category term="templating"></category><category term="python"></category><category term="mako"></category><category term="jinja"></category><category term="django"></category></entry><entry><title>Httpie, le client http intuitif</title><link href="http://dotmobo.github.io/httpie.html" rel="alternate"></link><updated>2015-12-08T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-12-08:httpie.html</id><summary type="html">&lt;img alt="Httpie" class="align-right" src="./images/http.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://httpie.org"&gt;Httpie&lt;/a&gt; est un client http en ligne de commande plutôt
bien foutu. C'est une alternative viable à &lt;a class="reference external" href="http://curl.haxx.se/"&gt;curl&lt;/a&gt; qui
a été développée en python.&lt;/p&gt;
&lt;p&gt;Intuitif, simple, et prenant en charge la coloration syntaxique, c'est l'outil
idéal pour requêter des APIs JSON par exemple.&lt;/p&gt;
&lt;p&gt;Tu l'installes avec pip :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install httpie
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu disposes maintenant de la commande &lt;strong&gt;http&lt;/strong&gt; dans ton terminal qui te
permettra d'effectuer des requêtes très simplement de cette manière:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http &lt;span class="o"&gt;[&lt;/span&gt;flags&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;METHOD&lt;span class="o"&gt;]&lt;/span&gt; URL &lt;span class="o"&gt;[&lt;/span&gt;ITEM &lt;span class="o"&gt;[&lt;/span&gt;ITEM&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux évidemment faire du GET:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http httpie.org
http GET httpie.org
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Du DELETE:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http DELETE example.org/todos/7
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou mettre à jour les données d'une API via PUT:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http PUT example.org X-API-Token:123 &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;John
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu remarques ici qu'on a d'abord passé la méthode PUT, puis l'url, puis le token
d'authentification dans l'entête de la requête, et enfin les données.&lt;/p&gt;
&lt;p&gt;Pas besoin d'utiliser des options pour spécifier chaque élément, tout se fait intuitivement !
Les éléments de l'entête de la requête sont séparés par &lt;strong&gt;:&lt;/strong&gt;, les données par
&lt;strong&gt;=&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tu peux aussi utiliser l'option &lt;strong&gt;-a&lt;/strong&gt; pour l'authentification type
username/password.&lt;/p&gt;
&lt;p&gt;Par exemple, pour poster un commentaire sur un problème via l'api github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http -a USERNAME POST https://api.github.com/repos/jkbrzt/httpie/issues/83/comments &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTPie is awesome!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux utiliser les symboles de redirection pour uploader
ou downloader des fichiers :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http example.org &amp;lt; file.json
http example.org &amp;gt; file.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;L'outil est très complet (gestion des sessions, des certificats SSL) mais je
l'apprécie surtout pour son côté simple et facile d'accès.&lt;/p&gt;
&lt;p&gt;Tu vas pouvoir manipuler et tester tes APIs très rapidement, sans te prendre la
tête avec une documentation imbuvable!&lt;/p&gt;
</summary><category term="httpie"></category><category term="http"></category><category term="python"></category><category term="curl"></category><category term="json"></category></entry><entry><title>Ajouter un captcha dans un formulaire django</title><link href="http://dotmobo.github.io/django-simple-captcha.html" rel="alternate"></link><updated>2015-11-28T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-11-28:django-simple-captcha.html</id><summary type="html">&lt;img alt="Django" class="align-right" src="./images/djangopony.png" /&gt;
&lt;p&gt;Suite à &lt;a class="reference external" href="http://dotmobo.github.io/django-countries.html"&gt;l'article sur django-countries&lt;/a&gt;,
on va continuer notre parcours des petits outils simples et efficaces pour améliorer nos formulaires django.&lt;/p&gt;
&lt;p&gt;Avant d'aborder le gros morceau qu'est &lt;a class="reference external" href="http://django-crispy-forms.readthedocs.org/en/latest/"&gt;django-cryspy&lt;/a&gt;
(tu peux déjà y jeter un oeil si tu es curieux), on va parler de l'intégration de captchas sous django.&lt;/p&gt;
&lt;p&gt;L'api de captcha la plus connue est sûrement &lt;a class="reference external" href="https://www.google.com/recaptcha"&gt;reCAPTCHA&lt;/a&gt; de google,
et il en existe une implémentation sous django baptisée &lt;a class="reference external" href="https://github.com/praekelt/django-recaptcha"&gt;django-recaptcha&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mais tu ne veux peut-être pas dépendre d'un service google pour diverses raisons, en préférant
une solution autonome, simple, légère, efficace et maintenue.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mbi/django-simple-captcha"&gt;Django-simple-captcha&lt;/a&gt; remplit haut la main toutes ces conditions
et est même compatible python 3. Elle est customisable, s'intègre dans les formulaires django et sous
&lt;em&gt;django-crispy&lt;/em&gt;. Différents types de captcha sont disponibles comme des caractères aléatoires,
des calculs mathématiques, des dictionnaires de mots.&lt;/p&gt;
&lt;p&gt;Captcha utilise &lt;em&gt;PIL&lt;/em&gt; et &lt;em&gt;Pillow&lt;/em&gt; qui nécessitent certaines librairies systèmes.
Par exemple sous Ubuntu, tu fais:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get -y install libz-dev libjpeg-dev libfreetype6-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu l'installes comme d'habitude avec pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django-simple-captcha
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et tu ajoutes &lt;strong&gt;captcha&lt;/strong&gt; dans la liste de tes &lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;
dans le fichier &lt;em&gt;settings.py&lt;/em&gt; de django:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;captcha&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu synchronises ta base de données:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et tu ajoutes l'entrée suivante dans ton fichier &lt;strong&gt;urls.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^captcha/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;captcha.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il ne reste plus qu'à l'intégrer dans ton formulaire.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Soit dans un &lt;strong&gt;Form&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;captcha.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CaptchaField&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaptchaTestForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;myfield&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnyOtherField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;captcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CaptchaField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Soit dans un &lt;strong&gt;ModelForm&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;captcha.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CaptchaField&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaptchaTestModelForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;captcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CaptchaField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et sous &lt;em&gt;django-crispy&lt;/em&gt;, tu peux utiliser &lt;strong&gt;captcha&lt;/strong&gt; comme un &lt;strong&gt;Field&lt;/strong&gt; à déclarer dans le &lt;strong&gt;Layout&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;captcha.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CaptchaField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;crispy_forms.helper&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FormHelper&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;crispy_forms.layout&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Submit&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaptchaTestModelForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;captcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CaptchaField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FormHelper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter Full Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;captcha &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter captcha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;valid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Valid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;La validation du formulaire se fait comme d'habitude. Si la réponse au captcha
est mauvaise, une exception &lt;strong&gt;ValidationError&lt;/strong&gt; sera levée:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CaptchaTestForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Validate the form: the captcha field will automatically&lt;/span&gt;
        &lt;span class="c"&gt;# check the input&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CaptchaTestForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;template.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il est également possible de faire une validation
&lt;a class="reference external" href="http://django-simple-captcha.readthedocs.org/en/latest/usage.html#example-usage-for-ajax-form"&gt;via ajax&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Il y a toute &lt;a class="reference external" href="http://django-simple-captcha.readthedocs.org/en/latest/advanced.html"&gt;une série de paramètres&lt;/a&gt;
permettant la customisation du captcha, mais il y en a surtout deux à retenir.&lt;/p&gt;
&lt;p&gt;Le premier permet de choisir le type de captcha que tu veux utiliser.
Dans ton &lt;strong&gt;settings.py&lt;/strong&gt;, tu peux mettre au choix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Random chars&lt;/span&gt;
&lt;span class="n"&gt;CAPTCHA_CHALLENGE_FUNCT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;captcha.helpers.random_char_challenge&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Simple Math&lt;/span&gt;
&lt;span class="n"&gt;CAPTCHA_CHALLENGE_FUNCT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;captcha.helpers.math_challenge&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Dictionary Word&lt;/span&gt;
&lt;span class="n"&gt;CAPTCHA_CHALLENGE_FUNCT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;captcha.helpers.word_challenge&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux même créer &lt;a class="reference external" href="http://django-simple-captcha.readthedocs.org/en/latest/advanced.html#roll-your-own"&gt;ta propre fonction de captcha&lt;/a&gt;
si celles proposées ne te conviennent pas.&lt;/p&gt;
&lt;p&gt;Le second permet d'utiliser le captcha dans les tests unitaires. Si la chaîne de caractères &lt;strong&gt;PASSED&lt;/strong&gt;
est renseignée comme valeur de réponse au captcha, le formulaire sera valide.
À mettre dans ton fichier de configuration de tes tests unitaires:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;CAPTCHA_TEST_MODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le résultat final ressemble à ça :&lt;/p&gt;
&lt;img alt="Django" class="align-left" src="http://django-simple-captcha.readthedocs.org/en/latest/_images/captcha3.png" /&gt;
</summary><category term="python"></category><category term="django"></category><category term="django-simple-captcha"></category><category term="captcha"></category><category term="crispy"></category><category term="django-crispy"></category><category term="recaptcha"></category></entry><entry><title>Upsert avec Postgresql</title><link href="http://dotmobo.github.io/upsert-postgresql.html" rel="alternate"></link><updated>2015-11-22T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-11-22:upsert-postgresql.html</id><summary type="html">&lt;img alt="Postgresql" class="align-right" src="./images/postgresql.png" /&gt;
&lt;p&gt;Lorsque l'on commence à &lt;a class="reference external" href="http://dotmobo.github.io/introduction-asyncio.html"&gt;s'amuser avec asyncio&lt;/a&gt;
pour faire des traitements asynchrones sur une base &lt;a class="reference external" href="http://www.postgresqlfr.org/"&gt;postgresql&lt;/a&gt;
avec &lt;a class="reference external" href="https://github.com/aio-libs/aiopg"&gt;aiopg&lt;/a&gt;, on rencontre assez vite le problème des accès concurrents
à une ressource partagée.&lt;/p&gt;
&lt;p&gt;Et notamment lorsqu'il s'agit d'appliquer de multiples &lt;em&gt;insert&lt;/em&gt; ou &lt;em&gt;update&lt;/em&gt;, appelés &lt;em&gt;upsert&lt;/em&gt; dans le monde de &lt;em&gt;mongodb&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sous &lt;em&gt;mongodb&lt;/em&gt; avec &lt;a class="reference external" href="https://api.mongodb.org/python/current/"&gt;pymongo&lt;/a&gt; c'est facile,
il suffit de passer le paramètre &lt;em&gt;upsert=True&lt;/em&gt; à la méthode &lt;em&gt;update_one&lt;/em&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_database&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_one&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;$inc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="n"&gt;upsert&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mais sous &lt;em&gt;posgresql&lt;/em&gt;, il n'existe pas de mot-clé &lt;em&gt;upsert&lt;/em&gt;. Et c'est là que tu te demandes:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Comment faire un upsert en postgresql, tout en évitant les problèmes d'accès concurrents ?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Si tu n'es pas pressé, attends la sortie de postgresql 9.5 qui va inclure &lt;a class="reference external" href="https://wiki.postgresql.org/wiki/What's_new_in_PostgreSQL_9.5#INSERT_..._ON_CONFLICT_DO_NOTHING.2FUPDATE_.28.22UPSERT.22.29"&gt;la syntaxe du upsert&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En imaginant une table qui ressemble à ça:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logins&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user_logins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;logins&lt;/span&gt;
&lt;span class="c1"&gt;----------+--------&lt;/span&gt;
&lt;span class="n"&gt;James&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Lois&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et que tu veuilles ajouter deux nouveaux &lt;em&gt;logins&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;user_logins&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Naomi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;James&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En temps normal, tu auras cette erreur si le &lt;em&gt;username&lt;/em&gt; existe déjà en base:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;duplicate&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;violates&lt;/span&gt; &lt;span class="k"&gt;unique&lt;/span&gt; &lt;span class="k"&gt;constraint&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;users_pkey&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;DETAIL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="k"&gt;Key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;James&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="k"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et bien en 9.5, tu pourras gérer ça de cette manière:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;user_logins&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Naomi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;James&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;CONFLICT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;DO&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;logins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_logins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logins&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;EXCLUDED&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Génial non ?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Oui mais bon, de mon côté, en production, j'ai du postgresql 9.4 et c'est pas près de changer.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dans ce cas-là, je t'invite à lire &lt;a class="reference external" href="http://www.depesz.com/2012/06/10/why-is-upsert-so-complicated/"&gt;ce très bon article&lt;/a&gt;
qui date un peu, mais qui résume très bien la situation.&lt;/p&gt;
&lt;p&gt;Pour rester simple, l'idée est d'effectuer un &lt;em&gt;update&lt;/em&gt; si l'entrée existe déjà ou un &lt;em&gt;insert&lt;/em&gt; sinon.
Mais lors d'accès concurrents, il se peut très bien que l'entrée ait été ajoutée par un autre processus entre
ta tentative ratée d'&lt;em&gt;update&lt;/em&gt; et ton &lt;em&gt;insert&lt;/em&gt; qui suit. Et là, ça plante lamentablement.&lt;/p&gt;
&lt;p&gt;Alors oui, il existe les &lt;em&gt;locks&lt;/em&gt; et les transactions, mais çe n'est pas suffisant et ça peut poser certains problèmes.
Par exemple, &lt;em&gt;postgresql&lt;/em&gt; stoppe une transaction en cours lorsqu'il rencontre une erreur.
Pour plus de détail, lis l'article que j'ai cité précédemment.&lt;/p&gt;
&lt;p&gt;Du coup, la &lt;a class="reference external" href="http://stackoverflow.com/questions/1109061/insert-on-duplicate-update-in-postgresql?answertab=votes#tab-top"&gt;solution admise par la communauté stackoverflow&lt;/a&gt;
est la suivante. Tu écris une fonction &lt;a class="reference external" href="https://fr.wikipedia.org/wiki/PL/SQL"&gt;pl/sql&lt;/a&gt; qui boucle sur le &lt;em&gt;update&lt;/em&gt; ou &lt;em&gt;insert&lt;/em&gt;, en utilisant l'exception &lt;em&gt;unique_violation&lt;/em&gt;.
Du coup, cette fonction s'appelle à l'aide d'un seul &lt;em&gt;select&lt;/em&gt;, donc pas besoin de &lt;em&gt;lock&lt;/em&gt; ou de transaction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;merge_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="n"&gt;VOID&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
    &lt;span class="n"&gt;LOOP&lt;/span&gt;
        &lt;span class="c1"&gt;-- first try to update the key&lt;/span&gt;
        &lt;span class="c1"&gt;-- note that &amp;quot;a&amp;quot; must be unique&lt;/span&gt;
        &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;found&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
            &lt;span class="k"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;-- not there, so try to insert the key&lt;/span&gt;
        &lt;span class="c1"&gt;-- if someone else inserts the same key concurrently,&lt;/span&gt;
        &lt;span class="c1"&gt;-- we could get a unique-key failure&lt;/span&gt;
        &lt;span class="k"&gt;BEGIN&lt;/span&gt;
            &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;RETURN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;EXCEPTION&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;unique_violation&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt;
            &lt;span class="c1"&gt;-- do nothing, and loop to try the UPDATE again&lt;/span&gt;
        &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="n"&gt;plpgsql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;merge_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;david&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;merge_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dennis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="base de données"></category><category term="postgres"></category><category term="psql"></category><category term="postgresql"></category></entry><entry><title>Introduction à Asyncio</title><link href="http://dotmobo.github.io/introduction-asyncio.html" rel="alternate"></link><updated>2015-11-15T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-11-15:introduction-asyncio.html</id><summary type="html">&lt;img alt="Django" class="align-right" src="./images/python.png" /&gt;
&lt;p&gt;La librairie &lt;a class="reference external" href="http://asyncio.org/"&gt;Asyncio&lt;/a&gt;
a fait beaucoup parler d'elle dernièrement, au point d'être
intégrée dans la bibliothèque standard depuis la version 3.4 de Python.&lt;/p&gt;
&lt;p&gt;C'est la réponse aux &lt;a class="reference external" href="https://gobyexample.com/goroutines"&gt;goroutines&lt;/a&gt;
de &lt;a class="reference external" href="https://golang.org/"&gt;Go&lt;/a&gt;, inscrivant ainsi Python dans la liste des
langages permettant la programmation asynchrone. Ce type de programmation permet
de ne pas bloquer son programme lors des opérations I/O qui peuvent durer un
certain temps et de réagir lors de la réception des informations au
lieu de les attendre. Ça permet ainsi d'optimiser et d'améliorer fortement les
performances de son code.&lt;/p&gt;
&lt;p&gt;Je t'invite à te renseigner sur les différences entre programmation asynchrone,
parallèle et concurrente via &lt;a class="reference external" href="http://sametmax.com/la-difference-entre-la-programmation-asynchrone-parallele-et-concurrente/"&gt;l'article de Sam&amp;amp;Max&lt;/a&gt;
et &lt;a class="reference external" href="https://www.youtube.com/watch?v=JpqnNCx7wVY"&gt;la vidéo de Jonathan Worthington&lt;/a&gt; du monde Perl.&lt;/p&gt;
&lt;p&gt;Asyncio utilise une boucle d'événements qui va contenir l'ensemble de nos tâches
à exécuter. Ces tâches devront être sous la forme de &lt;a class="reference external" href="http://sametmax.com/quest-ce-quune-coroutine-en-python-et-a-quoi-ca-sert/"&gt;coroutines&lt;/a&gt;,
qui sont des sortes de générateurs inversés, c'est-à-dire qu'on y envoie des données à la place
d'en reçevoir. C'est le côté &lt;em&gt;lazy&lt;/em&gt; des coroutines qui permet à Asyncio de les
exécuter en asynchrone.&lt;/p&gt;
&lt;p&gt;Trêve de blabla et passons à la pratique. Il y a déjà beaucoup d'articles sur le net
traitant du fonctionnement d'Asyncio et ce n'est pas forcément facile
de s'y retrouver. Tu vas donc voir ici un cas d'usage concret, qui est le développement
d'un aggrégateur de données &lt;em&gt;json&lt;/em&gt; performant. Le tutorial sera en python 3.5,
ce qui te permettra d'utiliser les nouveaux mots clés &lt;strong&gt;async&lt;/strong&gt; et &lt;strong&gt;await&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tu utiliseras la boucle d'événements, les coroutines et les objets &lt;strong&gt;Future&lt;/strong&gt;.
L'idée n'est pas de faire le code le plus simple et performant possible, mais plutôt de passer
en revue l'ensemble des concepts et mots-clés utiles.&lt;/p&gt;
&lt;p&gt;Pour Asyncio, il n'y a rien à installer à part python 3.5. Par contre, il va te
falloir &lt;a class="reference external" href="https://github.com/KeepSafe/aiohttp"&gt;aiohttp&lt;/a&gt; pour faire les requêtes http:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install aiohttp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et c'est là où le bât blesse. Tu ne pourras pas utiliser &lt;a class="reference external" href="http://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt; par exemple, car
il faut utiliser des outils compatibles avec Asyncio, c'est-à-dire écrits sous forme
de coroutines. Sinon, le programme bloquera la boucle d'événements et ça ne sera
pas asynchrone. Pareil pour les accès &lt;em&gt;BDD&lt;/em&gt;, il faut utiliser &lt;a class="reference external" href="https://github.com/aio-libs/aiopg"&gt;aiopg&lt;/a&gt; pour postgresql par exemple.&lt;/p&gt;
&lt;p&gt;Tu crées un fichier &lt;em&gt;asyncio35.py&lt;/em&gt;, tu importes &lt;em&gt;aiohttp&lt;/em&gt; et &lt;em&gt;asyncio&lt;/em&gt; et tu déclares ta liste
d'urls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;

&lt;span class="n"&gt;URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://ip.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://headers.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;http://date.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu vas alors créer ta coroutine qui va récupérer les données renvoyées par une
url et les insérer dans un objet &lt;strong&gt;Future&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Coroutine récupérant les données provenant d&amp;#39;une url &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plusieurs explications sont nécessaires ici:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;async&lt;/strong&gt;: Nouveau mot-clé introduit en python 3.5, à mettre avant le &lt;strong&gt;def&lt;/strong&gt;, qui permet de spécifier que cette méthode est une coroutine asynchrone. Ça vient remplacer le &lt;strong&gt;&amp;#64;asyncio.coroutine&lt;/strong&gt; de python 3.4.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;async with&lt;/strong&gt;: Permet d'utiliser des &lt;em&gt;context managers&lt;/em&gt; asynchrones.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;await&lt;/strong&gt;: Bloque l'exécution de la coroutine jusqu'à la fin du traitement de l'instruction, ici &lt;strong&gt;response.json()&lt;/strong&gt;. Ça vient remplacer le &lt;strong&gt;yield from&lt;/strong&gt; de python 3.4.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;future.set_result&lt;/strong&gt;: Définit la valeur de l'objet &lt;strong&gt;Future&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ensuite, dans ton &lt;em&gt;main&lt;/em&gt;, tu initalises ta boucle, ton client &lt;em&gt;aiohttp&lt;/em&gt;, ta liste
de tâches et ta liste de résultats:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# On initialise les variables&lt;/span&gt;
    &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu ajoutes ton &lt;em&gt;callback&lt;/em&gt; pour les objets &lt;strong&gt;Future&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fill_results_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Callback de l&amp;#39;objet future qui ajoute sa valeur dans une liste &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour chaque url, tu vas:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;créer un objet &lt;strong&gt;Future&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;ajouter la méthode &lt;strong&gt;call_url&lt;/strong&gt; à la liste des tâches à accomplir via la méthode &lt;strong&gt;ensure_future&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;ajouter ton &lt;em&gt;callback&lt;/em&gt; &lt;strong&gt;fill_results_list&lt;/strong&gt; à ton objet &lt;strong&gt;Future&lt;/strong&gt; via la méthode &lt;strong&gt;add_done_callback&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# On créé les objets Future et la liste des tâches&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URLS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;list_tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill_results_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Puis, il suffit de lancer l'exécution des tâches de manière asynchrone via
la boucle d'événements et sa méthode &lt;strong&gt;run_until_complete&lt;/strong&gt;. Ton programme
sera bloqué ici jusqu'à la fin du traitement de toutes les tâches et donc de la
réception des objets &lt;strong&gt;Future&lt;/strong&gt; via &lt;strong&gt;asyncio.wait&lt;/strong&gt;. À la fin, il affiche la liste
des résultats sur la sortie standard:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Exécution des tâches&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_tasks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enfin, tu peux fermer le client &lt;em&gt;aiohttp&lt;/em&gt; et la boucle d'événements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Ferme le client et la boucle&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Encore une chose concernant la boucle. Celle-ci est unique pour tout le programme.
Donc il faut faire attention quand tu la manipules à plusieurs endroits du code,
et quand tu la fermes.&lt;/p&gt;
&lt;p&gt;Voici le résultat final :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Aggrégation de données provenant d&amp;#39;urls&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://ip.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://headers.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;http://date.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Coroutine récupérant les données provenant d&amp;#39;une url &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# On initialise les variables&lt;/span&gt;
    &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fill_results_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Callback de l&amp;#39;objet future qui ajoute sa valeur dans une liste &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c"&gt;# On créé les objets Future et la liste des tâches&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URLS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;list_tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill_results_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Exécution des tâches&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_tasks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Ferme le client et la boucle&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et hop, tu exécutes tout ça:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;python asyncio35.py
&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;109.221.53.120&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Host&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;headers.jsontest.com&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Python/3.5 aiohttp/0.18.4&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;*/*&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Content-Length&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;11-14-2015&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;03:16:45 PM&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;milliseconds_since_epoch&amp;#39;&lt;/span&gt;: 1447514205836&lt;span class="o"&gt;}]&lt;/span&gt;

real        0m0.511s
user        0m0.263s
sys 0m0.033s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Ok c'est sympa mais est-ce que c'est vraiment plus rapide en asynchrone ?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Tu veux une preuve ? En voici une; le même programme sans Asyncio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Aggrégation de données provenant d&amp;#39;urls&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://ip.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://headers.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;http://date.jsontest.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;list_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;URLS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu l'exécutes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;python noasyncio35.py
&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;109.221.53.120&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Host&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;headers.jsontest.com&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;python-requests/2.8.1&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;*/*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;11-14-2015&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;11:57:03 AM&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;milliseconds_since_epoch&amp;#39;&lt;/span&gt;: 1447502223337&lt;span class="o"&gt;}]&lt;/span&gt;

real        0m1.188s
user        0m0.247s
sys 0m0.017s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le double de temps ! Convaincu ?&lt;/p&gt;
&lt;p&gt;Alors évidemment, ce n'est qu'un simple cas d'usage. Il y a beaucoup, mais
vraiment beaucoup plus à voir dans &lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;la doc officielle&lt;/a&gt;.&lt;/p&gt;
</summary><category term="python"></category><category term="asychrone"></category><category term="asyncio"></category><category term="aiohttp"></category><category term="requests"></category><category term="json"></category><category term="http"></category><category term="async"></category><category term="await"></category><category term="coroutine"></category></entry><entry><title>TinyDB, la base de données pure python</title><link href="http://dotmobo.github.io/tinydb.html" rel="alternate"></link><updated>2015-11-06T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-11-06:tinydb.html</id><summary type="html">&lt;img alt="TinyDB" class="align-right" src="./images/tinydb.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/msiemens/tinydb"&gt;TinyDB&lt;/a&gt;, ce n'est pas la base de données qui va tout révolutionner, mais
c'est le petit outil sympa à avoir à portée de main.&lt;/p&gt;
&lt;p&gt;Elle est orientée &lt;em&gt;document&lt;/em&gt;, comme &lt;a class="reference external" href="https://www.mongodb.org/"&gt;MongoDB&lt;/a&gt;, en se basant sur des fichiers &lt;a class="reference external" href="http://www.json.org/"&gt;JSON&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Le code est écrit en pure python, sans besoin d'aucune dépendance, et est compatible
python 2 et 3.&lt;/p&gt;
&lt;p&gt;Niveau utilisation, il ne faut pas espérer des perfs de malade ; ce n'est pas fait
pour ça.&lt;/p&gt;
&lt;p&gt;Par contre, si tu as besoin d'une mini BDD pour afficher des news sur
un site, ça fera l'affaire.&lt;/p&gt;
&lt;p&gt;Personnellement, je l'utilise plutôt lors de la rédaction de tests unitaires,
lorsque j'ai besoin d'une batterie de données de test.&lt;/p&gt;
&lt;p&gt;Pour l'utiliser, tu l'installes via &lt;em&gt;pip&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install tinydb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu crées, par exemple, une base de données contenant des légumes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;meslegumes.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le fichier &lt;em&gt;meslegumes.json&lt;/em&gt; correspond à ta base de données et s'est créé dans
le répertoire courant.&lt;/p&gt;
&lt;p&gt;Tu crées alors une table &lt;em&gt;legumes&lt;/em&gt;. Évite les caractères spéciaux dans le nom de la table,
ça peut poser problème:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;legumes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu vas maintenant insérer des légumes via la méthode &lt;em&gt;insert&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En affichant tous les éléments de ta table, tu verras tes légumes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux désormais utiliser un langage de requête.
Par exemple, si tu veux récupérer toutes les carottes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou tous les légumes qui sont plus de deux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux utiliser le &lt;strong&gt;ET&lt;/strong&gt; et le &lt;strong&gt;OU&lt;/strong&gt; logique, pour combiner tes requêtes lors
de ta recherche de légumes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux évidemment mettre à jour tes navets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et supprimer tes carottes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;carotte&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;patate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nombre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;navet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou carrément vider tous tes légumes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voilà pour les bases! Pour un usage simple, ça devrait te suffire.&lt;/p&gt;
&lt;p&gt;Il existe &lt;a class="reference external" href="http://tinydb.readthedocs.org/en/latest/usage.html#recap"&gt;d'autres opérations&lt;/a&gt;
pour le langage de requête comme &lt;em&gt;insert_multiple&lt;/em&gt;,
&lt;em&gt;delete&lt;/em&gt;, &lt;em&gt;increment&lt;/em&gt;, &lt;em&gt;decrement&lt;/em&gt;, &lt;em&gt;get&lt;/em&gt;, &lt;em&gt;contains&lt;/em&gt;, &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tu peux également stocker les légumes en mémoire à la place du fichier json:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb.storages&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MemoryStorage&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MemoryStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et utiliser des &lt;em&gt;middlewares&lt;/em&gt;, pour faire du cache par exemple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb.storages&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONStorage&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tinydb.middlewares&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CachingMiddleware&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TinyDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;meslegumes.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CachingMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSONStorage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enfin, il est également possible de customiser TinyDB en écrivant ton propre
&lt;a class="reference external" href="http://tinydb.readthedocs.org/en/latest/extend.html#write-a-serializer"&gt;Serializer&lt;/a&gt;,
ou d'écrire une &lt;a class="reference external" href="http://tinydb.readthedocs.org/en/latest/extend.html#write-a-custom-storage"&gt;implémentation YAML&lt;/a&gt;
pour le stockage des données à la place de JSON, ou encore d'écrire
&lt;a class="reference external" href="http://tinydb.readthedocs.org/en/latest/extend.html#write-a-custom-middleware"&gt;tes propres Middlewares&lt;/a&gt;.&lt;/p&gt;
</summary><category term="tinydb"></category><category term="python"></category><category term="base de données"></category><category term="bdd"></category><category term="nosql"></category></entry><entry><title>Gestion des pays dans django avec django-countries</title><link href="http://dotmobo.github.io/django-countries.html" rel="alternate"></link><updated>2015-10-31T00:00:00+01:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-31:django-countries.html</id><summary type="html">&lt;img alt="Django" class="align-right" src="./images/djangopony.png" /&gt;
&lt;p&gt;En développement web, on a souvent besoin de faire des formulaires. Et
notamment des formulaires d'inscription, avec saisie du nom, prénom, adresse et
donc pays.&lt;/p&gt;
&lt;p&gt;Tu m'accorderas que laisser le champs pays libre risque de générer des
erreurs de saisie, et que gérer manuellement une liste déroulante de pays est
ennuyeux à mourir.&lt;/p&gt;
&lt;p&gt;Rassure-toi, une solution existe, et c'est là qu'intervient
&lt;a class="reference external" href="https://github.com/SmileyChris/django-countries"&gt;django-countries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Django-countries, c'est la librairie qui ne paie pas de mine mais qui, l'air de
rien, est vachement pratique. Elle propose:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Une liste déroulante pour les formulaires, contenant la liste de tous les
pays avec leurs &lt;a class="reference external" href="http://www.iso.org/iso/fr/country_codes.htm"&gt;codes iso 3166&lt;/a&gt;,
traduite dans 25 langues.&lt;/li&gt;
&lt;li&gt;Des widgets.&lt;/li&gt;
&lt;li&gt;Des fichiers statiques correspondants aux icônes des drapeaux des pays.&lt;/li&gt;
&lt;li&gt;Un champ pays pour les modèles.&lt;/li&gt;
&lt;li&gt;Une compatibilité avec &lt;a class="reference external" href="http://www.django-rest-framework.org/"&gt;Django Rest Framework&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tu l'installes via pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django-countries
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et tu ajoutes &lt;strong&gt;django_countries&lt;/strong&gt; dans la liste de tes &lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;
dans le fichier &lt;em&gt;settings.py&lt;/em&gt; de django.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;django_countries&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Au niveau de ton modèle, tu peux maintenant utiliser le champ &lt;strong&gt;CountryField&lt;/strong&gt;,
qui est basé sur &lt;strong&gt;CharField&lt;/strong&gt; et qui correspond au code iso 3166:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_countries.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CountryField&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CountryField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(select country)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux maintenant créer une personne avec un pays associé, et accéder aux
différents attributs du pays comme son code, son icône, son nom et autres:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Chris&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;
&lt;span class="n"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;New Zealand&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;/static/flags/nz.gif&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alpha3&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;NZL&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numeric&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;554&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numeric_padded&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;554&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dans le formulaire associé à ton modèle, tu peux aussi utiliser un widget qui va
afficher le drapeau du pays à côté de la liste déroulante:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_countries.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CountrySelectWidget&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PersonForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CountrySelectWidget&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dans le &lt;em&gt;settings.py&lt;/em&gt;, on peut spécifier les pays à utiliser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;COUNTRIES_ONLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;NZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;AU&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou carrément customiser la liste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;COUNTRIES_OVERRIDE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;NZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Middle Earth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;AU&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et on a donc également une compatibilité avec Django Rest Framework en modifiant
le serializer de cette manière:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PersonSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CountryField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Je ne suis pas rentré dans le détail de la customisation pour rester simple,
mais il est possible de modifier pas mal de choses au niveau de la liste,
du champ, de l'affichage et du paramétrage.&lt;/p&gt;
&lt;p&gt;A voir dans la doc officielle si ça t'intéresse!&lt;/p&gt;
</summary><category term="python"></category><category term="django"></category><category term="django-countries"></category><category term="countries"></category><category term="pays"></category></entry><entry><title>Intégration continue sous Github avec Tox, Travis, Coveralls et Landscape</title><link href="http://dotmobo.github.io/integration-continue.html" rel="alternate"></link><updated>2015-10-25T00:00:00+02:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-25:integration-continue.html</id><summary type="html">&lt;img alt="Travis" class="align-right" src="./images/travis.png" /&gt;
&lt;p&gt;L'&lt;a class="reference external" href="https://fr.wikipedia.org/wiki/Int%C3%A9gration_continue"&gt;intégration continue&lt;/a&gt;
est une part très importante d'un projet, à ne surtout pas négliger.
Elle permet de vérifier constamment son code via des tests unitaires,
généralement à chaque &lt;em&gt;commit&lt;/em&gt;. Ceci permet de tester la qualité et la robustesse
du code et d'éviter toutes régressions.&lt;/p&gt;
&lt;p&gt;Dans cet article, tu verras comment mettre en place l'intégration continue d'une application
&lt;a class="reference external" href="https://www.python.org/"&gt;python&lt;/a&gt; sous &lt;a class="reference external" href="https://github.com/"&gt;Github&lt;/a&gt;. À la fin de cette lecture, tu seras capable:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;d'écrire un test unitaire simple.&lt;/li&gt;
&lt;li&gt;de vérifier la couverture de ton code.&lt;/li&gt;
&lt;li&gt;d'exécuter tes tests sous plusieurs versions de python.&lt;/li&gt;
&lt;li&gt;d'automatiser l’exécution des tests à chaque &lt;em&gt;commit&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;d'automatiser la vérification de la couverture du code.&lt;/li&gt;
&lt;li&gt;d'automatiser l'analyse de la qualité de ton code.&lt;/li&gt;
&lt;li&gt;d'utiliser les badges github pour l'affichage des rapports.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L'application de démo de ce tuto est dispo &lt;a class="reference external" href="https://github.com/dotmobo/demo-integration-continue"&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="creer-une-application"&gt;
&lt;h2&gt;1) Créer une application&lt;/h2&gt;
&lt;p&gt;Dans le répertoire de ton projet &lt;em&gt;myproject&lt;/em&gt;, tu vas créer un package &lt;em&gt;myapp&lt;/em&gt; contenant le
classique &lt;em&gt;__init__.py&lt;/em&gt;, ainsi qu'un fichier &lt;em&gt;maths.py&lt;/em&gt;.
Celui-ci contiendra une méthode d'addition et de soustraction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Provides an addition function and a subtraction function&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Méthode d&amp;#39;addition &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Méthode de soustraction &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu vas donc mettre en place l'intégration continue sur ce petit bout de code.&lt;/p&gt;
&lt;p&gt;Tu ajoutes également dans le répertoire du projet le fichier &lt;em&gt;setup.py&lt;/em&gt; suivant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;My project&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Me&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;me@noreply.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://myproject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Puis, tu exécutes la commande suivante afin d'ajouter ton application dans le &lt;em&gt;path&lt;/em&gt;
python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;develop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ajouter-des-tests-unitaires"&gt;
&lt;h2&gt;2) Ajouter des tests unitaires&lt;/h2&gt;
&lt;p&gt;Tu vas maintenant créer des tests unitaires à l'aide de
&lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Au même niveau que ton package &lt;em&gt;myapp&lt;/em&gt;, tu vas créer un package &lt;em&gt;tests&lt;/em&gt; qui sera
dédié aux tests unitaires. Celui-ci doit contenir le fichier &lt;em&gt;__init__.py&lt;/em&gt; et le
fichier &lt;em&gt;test_maths.py&lt;/em&gt; suivant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Tests unitaires&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.maths&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subtraction&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MathsTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Classe qui va contenir nos test unitaires&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Méthode qui permet d&amp;#39;initialiser des variables pour nos tests &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Test de l&amp;#39;addition &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Test de la soustraction &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Méthode appelée à la fin des tests &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et pour vérifier le bon fonctionnement de tes tests, tu peux les exécuter via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python tests/test_maths.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour plus d'informations concernant les tests unitaires, je t'invite à te pencher
sur le dossier de Sam&amp;amp;Max :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-1/"&gt;http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-2/"&gt;http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-3/"&gt;http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-3/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-4/"&gt;http://sametmax.com/un-gros-guide-bien-gras-sur-les-tests-unitaires-en-python-partie-4/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="couvrir-son-code-avec-coverage"&gt;
&lt;h2&gt;3) Couvrir son code avec Coverage&lt;/h2&gt;
&lt;p&gt;Tu vas maintenant ajouter les utilitaires permettant la couverture de ton code.&lt;/p&gt;
&lt;p&gt;Premièrement, tu installes &lt;a class="reference external" href="https://bitbucket.org/ned/coveragepy"&gt;coverage&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install coverage
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Puis, tu crées le fichier de configuration de coverage appelé &lt;em&gt;.coveragerc&lt;/em&gt;
dans ton répertoire &lt;em&gt;myproject&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;run&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    myapp

&lt;span class="o"&gt;[&lt;/span&gt;report&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;omit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; */tests/*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu y indiques d'exéctuer les tests de ton application &lt;em&gt;myapp&lt;/em&gt;, tout en
ignorant d'analyser la couverture des fichiers de tests.
Sinon, il faudrait faire des tests unitaires pour tester les tests unitaires !&lt;/p&gt;
&lt;p&gt;Tu lances les tests unitaires avec coverage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;coverage run -m unittest discover tests/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux désormais afficher un rapport simple via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;coverage report
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ou un rapport html via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;coverage html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Celui-ci s'est créé dans le répertoire &lt;em&gt;htmlcov&lt;/em&gt;. A l'aide de ce rapport, tu
vas pouvoir visualiser le pourcentage de code couvert ainsi que les zones de code
couvertes et non couvertes, fichier par fichier. Plutôt pratique non ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="utiliser-tox-pour-l-execution-des-tests"&gt;
&lt;h2&gt;4) Utiliser Tox pour l'exécution des tests&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://testrun.org/tox/latest/"&gt;Tox&lt;/a&gt; vise à standardiser l'exécution des tests
unitaires en python. Il permet, à l'aide d'environnements virtuels, de tester ton
code sous plusieurs interpréteurs python et sous plusieurs versions de librairies.&lt;/p&gt;
&lt;p&gt;Il est très simple d'utilisation et s’interface parfaitement avec Travis.&lt;/p&gt;
&lt;p&gt;Tu peux l'installer via pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install tox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ensuite, il te faut créer le fichier &lt;em&gt;tox.ini&lt;/em&gt; dans le répertoire &lt;em&gt;myproject&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tox&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;envlist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;py27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;py34&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;testenv&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;coverage&lt;/span&gt;
&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;coverage&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;unittest&lt;/span&gt; &lt;span class="n"&gt;discover&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Explication:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;envlist&lt;/em&gt; permet de lister les interpréteurs python que l'on veut tester. Ici,
tu vas tester ton application sous python 2.7 et python 3.4. Il faut évidemment
les installer sur ton système si ce n'est pas déjà fait.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;deps&lt;/em&gt; liste les dépendances à installer dans le virtualenv qui sera créé.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;commands&lt;/em&gt; indique la commande à exécuter pour lancer les tests unitaires.&lt;/li&gt;
&lt;li&gt;il y a plein d'autres paramètres utilisables, va voir dans la
&lt;a class="reference external" href="https://testrun.org/tox/latest/example/basic.html"&gt;doc officielle&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enfin, pour exécuter tes tests sous les différents environnements, lance la
commande:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;tox
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Plutôt simple non ?&lt;/p&gt;
&lt;p&gt;Crée-toi un dépôt sur Github et &lt;em&gt;commit&lt;/em&gt; tout ça.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="activer-l-integration-continue-de-notre-projet-sous-travis-et-coveralls"&gt;
&lt;h2&gt;5) Activer l'intégration continue de notre projet sous Travis et Coveralls&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis&lt;/a&gt; est un outil d'intégration continue, à la
manière de &lt;a class="reference external" href="https://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt;. C'est lui qui va exécuter tes
tests unitaires à chaque &lt;em&gt;commit&lt;/em&gt;, et qui va t'envoyer un mail si un problème a
été rencontré.&lt;/p&gt;
&lt;p&gt;Tu peux t'y connecter via ton compte Github et y ajouter ton dépôt git via le bouton &lt;em&gt;+&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Au préalable, il faut créer un fichier &lt;em&gt;.travis.yml&lt;/em&gt; dans ton répertoire &lt;em&gt;myproject&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;TOX_ENV=py27&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;TOX_ENV=py34&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install tox&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;tox -e $TOX_ENV&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;after_success&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;pip install coveralls&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;coveralls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On y indique les environnements de tox à tester et le script tox à exécuter.&lt;/p&gt;
&lt;p&gt;Tu peux maintenant &lt;em&gt;commiter&lt;/em&gt; tout ça sur ton dépôt Github, et te rendre sur le site
de travis pour visualiser les rapports d'exécution de tes tests!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Attends un peu, c'est quoi la partie qui est dans le after_success, coveralls?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Bien vu! &lt;a class="reference external" href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt; est un outil qui permet de tester
la couverture de code à chaque &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Connecte-toi sur leur plate-forme via ton compte Github et active ton dépôt git via le bouton
&lt;em&gt;add repos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tu vas ainsi pouvoir voir l'évolution de la couverture de code et analyser les rapports proposés.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inspecter-la-qualite-du-code-avec-landscape-io"&gt;
&lt;h2&gt;6) Inspecter la qualité du code avec Landscape.io&lt;/h2&gt;
&lt;p&gt;Landscape.io est une plate-forme qui va inspecter la qualité de ton code à chaque &lt;em&gt;commit&lt;/em&gt;.
Celle-ci est gratuite pour les projets open-source disponibles sur Github.&lt;/p&gt;
&lt;p&gt;Elle se base sur &lt;a class="reference external" href="https://flake8.readthedocs.org/en/2.4.1/"&gt;flake8&lt;/a&gt; comme outil
d'inspection de code.&lt;/p&gt;
&lt;p&gt;Connecte-toi sur la plate-forme avec ton compte Github et ajoutes-y ton dépôt git
via &lt;em&gt;Add repository&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tu devras peut-être refaire un &lt;em&gt;commit&lt;/em&gt; pour activer le bazar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ajouter-des-badges-sur-github"&gt;
&lt;h2&gt;7) Ajouter des badges sur github&lt;/h2&gt;
&lt;p&gt;Tu va pouvoir te créer un fichier &lt;em&gt;README.rst&lt;/em&gt; et y ajouter les badges &lt;em&gt;travis&lt;/em&gt;,
&lt;em&gt;coveralls&lt;/em&gt; et &lt;em&gt;landscape&lt;/em&gt;. Tu peux trouver ces badges sous différents formats, notamment en
&lt;a class="reference external" href="http://sphinx-doc.org/rest.html"&gt;restructuredText&lt;/a&gt;, dans la configuration de
ton projet sur ces trois plate-formes.&lt;/p&gt;
&lt;p&gt;Exemple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;demo-integration-continue&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;-------------------------&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;Application de démo d&amp;#39;intégration continue sous github&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;.. image:&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://travis-ci.org/dotmobo/demo-integration-continue.svg&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;:target&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://travis-ci.org/dotmobo/demo-integration-continue&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;.. image:&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://coveralls.io/repos/dotmobo/demo-integration-continue/badge.svg?branch=master&amp;amp;service=github&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;:target&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://coveralls.io/github/dotmobo/demo-integration-continue?branch=master&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;.. image:&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://landscape.io/github/dotmobo/demo-integration-continue/master/landscape.svg?style=flat&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;:target&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://landscape.io/github/dotmobo/demo-integration-continue/master&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;:alt&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Code Health&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Commit&lt;/em&gt; et rends-toi sur ton dépôt github pour voir
&lt;a class="reference external" href="https://github.com/dotmobo/demo-integration-continue"&gt;le résultat&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="github"></category><category term="travis"></category><category term="tox"></category><category term="intégration continue"></category><category term="coveralls"></category><category term="tests unitaires"></category><category term="landscape"></category><category term="coverage"></category></entry><entry><title>Passer de Sublime Text à Atom pour développer en Python</title><link href="http://dotmobo.github.io/sublime-text-to-atom.html" rel="alternate"></link><updated>2015-10-17T00:00:00+02:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-17:sublime-text-to-atom.html</id><summary type="html">&lt;img alt="Pelican" class="align-right" src="./images/atom.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Sublime Text, c'est vraiment pas mal mais bon, c'est pas libre.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Eclipse, c'est lourd, trop lourd.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Vim, j'ai pas le temps de m'y investir.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Emacs, j'y comprends rien.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Pycharm, ce n'est qu'à moitié gratuit.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;&amp;quot;Atom, y paraît que c'est buggé et lent.&amp;quot;&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Bon, je vois que tu es un difficile concernant le choix de ton éditeur de code,
et tu as bien raison ! Je t'arrêtes tout de suite en ce qui concerne
&lt;a class="reference external" href="https://atom.io/"&gt;Atom&lt;/a&gt;. Pour les autres, je ne vais pas rentrer dans le
troll!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;C'était&amp;quot;&lt;/em&gt; buggé et lent, mais ça ne l'est plus depuis la sortie de la version
stable 1.0 cet été. La version actuelle (1.0.19) marche plutôt bien et
est enfin devenue une alternative viable à
&lt;a class="reference external" href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Comme ST, tu vas pouvoir bénificier:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;des curseurs multiples.&lt;/li&gt;
&lt;li&gt;de la palette de commandes via &lt;em&gt;ctrl+shift+p&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;de la recherche de fichiers via &lt;em&gt;ctrl+p&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;d'une intégration Git très poussée.&lt;/li&gt;
&lt;li&gt;d'une vue permettant de parcourir tes fichiers.&lt;/li&gt;
&lt;li&gt;d'onglets, de panels.&lt;/li&gt;
&lt;li&gt;de la coloration syntaxique, de la complétion.&lt;/li&gt;
&lt;li&gt;d'une tonnes de plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il n'y a évidemment pas encore autant de plugins que pour ST, mais ça
vient comme tu peux le voir &lt;a class="reference external" href="https://atom.io/packages"&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Convaincu ? Prêt pour l'installation ? C'est parti.&lt;/p&gt;
&lt;p&gt;Installe-le tout d'abord via les paquets proposés sur le
&lt;a class="reference external" href="https://atom.io/"&gt;site officiel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Avant de l'exécuter, on va installer une série de plugins qui va te permettre
de développer dans de bonnes conditions. Ces plugins vont être:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/atom-minimap/minimap"&gt;minimap&lt;/a&gt;, qui est un
aperçu du code sous forme de minimap à la manière de ST.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/atom-community/autocomplete-paths"&gt;autocomplete-paths&lt;/a&gt;,
qui permet d'activer la complétion des chemins des dossiers et fichiers de ton
système.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sadovnychyi/autocomplete-python"&gt;autocomplete-python&lt;/a&gt;,
qui est le plugin le plus fiable pour la complétion Python, basé sur
&lt;a class="reference external" href="http://jedi.jedidjah.ch/en/latest/"&gt;jedi&lt;/a&gt;. Pour activer la complétion des
librairies présentes dans ton virtualenv, il suffit de lancer atom depuis ton
virtualenv.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/atom-community/linter"&gt;linter&lt;/a&gt;, qui permet de visualiser
les erreurs de syntaxe &lt;a class="reference external" href="http://atomlinter.github.io/"&gt;de nombreux langages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/AtomLinter/linter-flake8"&gt;linter-flake8&lt;/a&gt; comme linter python.
On aurait pu en utiliser un autre, comme
&lt;a class="reference external" href="https://github.com/AtomLinter/linter-pylint"&gt;linter-pylint&lt;/a&gt;, mais je
le trouve trop verbeux.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/emmetio/emmet-atom"&gt;emmet&lt;/a&gt; pour le développement HTML et
CSS.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/akonwi/git-plus"&gt;git-plus&lt;/a&gt;, qui permet d'utiliser toutes
les commandes git depuis Atom.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/smashwilson/merge-conflicts"&gt;merge-conflicts&lt;/a&gt;, qui est un
bon helper lors des &lt;em&gt;git merge&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/tombell/travis-ci-status"&gt;travis-ci-status&lt;/a&gt;, pour
afficher le status de &lt;a class="reference external" href="https://travis-ci.org/"&gt;travis&lt;/a&gt; dans la barre de
status d'Atom.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kevinsawicki/monokai"&gt;monokai&lt;/a&gt;, pour obtenir un thème
proche de ST.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/abe33/atom-pigments"&gt;pigments&lt;/a&gt;, pour afficher les
couleurs dans les fichiers CSS, LESS et autres.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/thomaslindstrom/color-picker"&gt;color-picker&lt;/a&gt;, pour choisir
une couleur HTML via &lt;em&gt;ctrl+alt+c&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/richrace/highlight-selected"&gt;highlight-selected&lt;/a&gt;, qui,
lors du double-clique sur un mot, met en surbrillance tous les mots
correspondants, comme ST.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Glavin001/atom-beautify"&gt;atom-beautify&lt;/a&gt;, qui permet
d'indenter automatiquement le code de nombreux langages pour améliorer la
lisibilité.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Lukasa/language-restructuredtext"&gt;language-restructuredtext&lt;/a&gt;,
qui active la coloration syntaxique des fichiers &lt;em&gt;.rst&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il en existe d'autres qui pourrait t'intéresser, comme
&lt;a class="reference external" href="https://github.com/atom/vim-mode"&gt;vim-mode&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/jeremyramin/terminal-plus"&gt;terminal-plus&lt;/a&gt;, ou encore
&lt;a class="reference external" href="https://github.com/danielbrodin/atom-project-manager"&gt;project-manager&lt;/a&gt;, à toi
de faire ton marché!&lt;/p&gt;
&lt;p&gt;Atom propose un outil en ligne de
commande, &lt;strong&gt;apm&lt;/strong&gt;, qui permet d'installer des plugins sans passer par le menu
&lt;em&gt;Settings&lt;/em&gt; d'Atom. On installe donc les plugins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apm install minimap
apm install autocomplete-paths
pip install jedi
apm install autocomplete-python
apm install linter
pip install flake8
apm install linter-flake8
apm install emmet
apm install git-plus
apm install merge-conflicts
apm install travis-ci-status
apm install monokai
apm install pigments
apm install color-picker
apm install highlight-selected
apm install atom-beautify
apm install language-restructuredtext
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux maintenant lancer Atom via la commande:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;atom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On commence par définir la tabulation comme étant 4 espaces pour être compatible
&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0008/"&gt;pep8&lt;/a&gt; dans
&lt;em&gt;Edit-&amp;gt;Preferences-&amp;gt;Settings&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Tab Length
4
&lt;/pre&gt;
&lt;p&gt;Puis on active le thème Monokai installé précédemment via
&lt;em&gt;Edit-&amp;gt;Preferences-&amp;gt;Theme&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Syntax Theme
Monokai
&lt;/pre&gt;
&lt;p&gt;Et c'est fini! Tout est prêt pour commencer le développement de tes applications
Python et Django.&lt;/p&gt;
&lt;p&gt;Tu peux alors créer tes propres
&lt;a class="reference external" href="https://atom.io/docs/latest/using-atom-snippets"&gt;snippets&lt;/a&gt; en éditant le
fichier &lt;em&gt;snippets.cson&lt;/em&gt; du répertoire &lt;em&gt;~/.atom&lt;/em&gt; de cette manière par exemple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s1"&gt;&amp;#39;.source.js&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;console.log&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;prefix&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;log&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;console.log(${1:&amp;quot;crash&amp;quot;});$2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Utilise &lt;em&gt;alt+shift+s&lt;/em&gt; pour rechercher tes snippets.&lt;/p&gt;
&lt;p&gt;Enfin tu vas également pouvoir sauvegarder ta configuration sur Github de &lt;a class="reference external" href="https://github.com/dotmobo/dotatom"&gt;cette
manière&lt;/a&gt; par exemple.&lt;/p&gt;
</summary><category term="sublime text"></category><category term="python"></category><category term="atom"></category><category term="éditeur"></category><category term="github"></category><category term="code"></category></entry><entry><title>Générer son site statique grâce à Pelican</title><link href="http://dotmobo.github.io/pelican.html" rel="alternate"></link><updated>2015-10-11T00:00:00+02:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-11:pelican.html</id><summary type="html">&lt;img alt="Pelican" class="align-right" src="./images/pelican.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; est un outil vraiment chouette pour
générer rapidement un site statique comme un blog, afin de le publier via
&lt;a class="reference external" href="https://pages.github.com"&gt;Github Pages&lt;/a&gt; par exemple.&lt;/p&gt;
&lt;p&gt;C'est une alternative Python à &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; (qui lui est
écrit en Ruby), permettant de rédiger ses articles en Markdown. La
principale force de Pelican, c'est de proposer également le &lt;a class="reference external" href="http://sphinx-doc.org/rest.html"&gt;reStructuredText&lt;/a&gt; comme format d'écriture, ce qui rendra
heureux tous les amoureux de Sphinx.&lt;/p&gt;
&lt;p&gt;Pour l'installer, rien de plus simple, l'outil est dispo sur &lt;a class="reference external" href="https://pypi.python.org/pypi"&gt;Pypi&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il propose une commande de génération automatique de projet :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/dev/myblog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/dev/myblog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;N'oublie pas de dire oui aux deux questions concernant Github Pages,
et ... c'est tout! Pour proposer des articles, il te suffit de les créer en .rst
dans le dossier &lt;em&gt;content&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi ~/dev/myblog/content/mon-article.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ils devront ressembler à ça:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;Mon article&lt;/span&gt;
&lt;span class="gh"&gt;###########&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2015-10-11 10:20&lt;/span&gt;
&lt;span class="nc"&gt;:modified:&lt;/span&gt; &lt;span class="nf"&gt;2015-11-04 18:40&lt;/span&gt;
&lt;span class="nc"&gt;:tags:&lt;/span&gt; &lt;span class="nf"&gt;python,django&lt;/span&gt;
&lt;span class="nc"&gt;:category:&lt;/span&gt; &lt;span class="nf"&gt;Développement&lt;/span&gt;
&lt;span class="nc"&gt;:slug:&lt;/span&gt; &lt;span class="nf"&gt;mon-article&lt;/span&gt;
&lt;span class="nc"&gt;:authors:&lt;/span&gt; &lt;span class="nf"&gt;Toi&lt;/span&gt;
&lt;span class="nc"&gt;:summary:&lt;/span&gt; &lt;span class="nf"&gt;Mon article concerne blablabla&lt;/span&gt;

blablabla ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jetons maintenant un coup d'oeil aux deux fichiers de configuration.&lt;/p&gt;
&lt;p&gt;Le premier, &lt;em&gt;pelicanconf.py&lt;/em&gt; , est utilisé pour la configuration générale du site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;myusername&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;myblog&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Europe/Paris&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;fr&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c"&gt;# Social widget&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c"&gt;# Uncomment following line if you want document-relative URLs when developing&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Theme&lt;/span&gt;
&lt;span class="c"&gt;# THEME = &amp;quot;simple&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu remarqueras une partie &lt;em&gt;Theme&lt;/em&gt;, on y reviendra plus tard.
Le reste est relativement compréhensible pour se passer d'explication.&lt;/p&gt;
&lt;p&gt;Le second, &lt;em&gt;publishconf.py&lt;/em&gt; , rajoute les spécificités pour la production:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="c"&gt;# This file is only used if you use `make publish` or&lt;/span&gt;
&lt;span class="c"&gt;# explicitly specify it as your config file.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelicanconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://myusername.github.io&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feeds/all.atom.xml&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Following items are often useful when publishing&lt;/span&gt;

&lt;span class="c"&gt;#DISQUS_SITENAME = &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#GOOGLE_ANALYTICS = &amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il est important ici de définir &lt;strong&gt;SITEURL&lt;/strong&gt; et &lt;strong&gt;FEED_ATOM&lt;/strong&gt;.
En effet, en mode dev, on n'a pas besoin de générer les flux atom et on utilise
des urls relatives.&lt;/p&gt;
&lt;p&gt;Si besoin, tu noteras une compatibilité avec Google Analytics.
Et concernant Disqus, on y reviendra également plus tard.&lt;/p&gt;
&lt;p&gt;Pelican propose alors tout un tas de commandes pour générer et déployer ton site.
Au choix, on va pouvoir utiliser &lt;a class="reference external" href="http://www.fabfile.org"&gt;Fabric&lt;/a&gt;
(malheureusement non disponible en Python 3) ou &lt;strong&gt;make&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pour générer ton site en mode dev (utilise &lt;em&gt;pelicanconf.py&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu peux aussi utiliser un watcher pour automatiser la génération de ton site à chaque modification:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make regenerate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour servir ton site en mode dev sur &lt;a class="reference external" href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make serve
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour générer ton site pour la production (utilise &lt;em&gt;publishconf.py&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make publish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enfin, pour le diffuser sur le master de ton dépôt Github Pages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Concernant le dépôt Github, je te recommande de commiter le code Pelican sur une
branche à part, et de garder la branche &lt;em&gt;master&lt;/em&gt; pour la diffusion du site.
Ton dépôt devra s'appeler &lt;em&gt;&amp;lt;username&amp;gt;.github.io&lt;/em&gt; pour être compatbile avec
Github Pages.&lt;/p&gt;
&lt;p&gt;Par défaut, le design peut sembler austère.&lt;/p&gt;
&lt;p&gt;C'est pourquoi on va installer un &lt;a class="reference external" href="http://pelicanthemes.com/"&gt;thème&lt;/a&gt; un peu
plus moderne utilisant &lt;a class="reference external" href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, comme
&lt;a class="reference external" href="https://github.com/nairobilug/pelican-alchemy"&gt;alchemy&lt;/a&gt; par exemple.&lt;/p&gt;
&lt;p&gt;La plupart des thèmes disponibles sont sous licence MIT, donc n'hésite pas à les
forker pour y apporter tes customisations.&lt;/p&gt;
&lt;p&gt;Pour les habitués de &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;django&lt;/a&gt; et
&lt;a class="reference external" href="http://flask.pocoo.org/"&gt;flask&lt;/a&gt;, Pelican utilise &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;jinja2&lt;/a&gt;
comme moteur de template. Et ça c'est carrément cool.&lt;/p&gt;
&lt;p&gt;On installe donc alchemy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@github.com:nairobilug/pelican-alchemy.git ~/dev/pelican-alchemy
pelican-themes -i ~/dev/pelican-alchemy/alchemy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Et on définit la variable &lt;strong&gt;THEME&lt;/strong&gt; de notre fichier de conf &lt;em&gt;pelicanconf.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;alchemy&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITE_SUBTEXT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Blabla&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PROFILE_IMAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;profil.jpeg&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/myusername&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;TWITTER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://twitter.com/myusername&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_FAVICON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;LICENSE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MIT&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LICENSE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://opensource.org/licenses/MIT&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;MENU_ITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;META_DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Blabla&lt;/span&gt;
&lt;span class="n"&gt;PAGES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;CATEGORIES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;TAGS_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SHOW_ARTICLE_AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Concernant les paramètres optionnels, je t'invite à regarder la doc d'alchemy.&lt;/p&gt;
&lt;p&gt;&amp;quot;Ok, avoir un blog statique, c'est bien sympa, mais comment je fais pour avoir
des commentaires? Il me faut bien une partie dynamique non ?&amp;quot;. Pas de panique,
&lt;a class="reference external" href="https://disqus.com"&gt;Disqus&lt;/a&gt; est là pour ça.&lt;/p&gt;
&lt;p&gt;Il te suffit de te créer un compte sur Disqus et d'y enregistrer ton site en
utilisant le paramétrage &lt;strong&gt;universal-embed-code&lt;/strong&gt;. À partir de là, tu vas pouvoir
le configurer via &lt;em&gt;http://&amp;lt;username&amp;gt;.disqus.com/admin/settings&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Enfin, tu l'actives via ton fichier de conf de prod &lt;em&gt;publishconf.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;myusername&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tu commites tout ça, tu publies et hop! Ton blog est complètement prêt!&lt;/p&gt;
&lt;p&gt;Et si tu veux pousser un peu plus loin l'outil, il y a énormément de
&lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;plugins&lt;/a&gt; disponibles.&lt;/p&gt;
</summary><category term="pelican"></category><category term="python"></category><category term="jekyll"></category><category term="blog"></category><category term="github"></category></entry><entry><title>Bienvenue, ami(e) développeur(euse)!</title><link href="http://dotmobo.github.io/bienvenue.html" rel="alternate"></link><updated>2015-10-10T00:00:00+02:00</updated><author><name>Morgan</name></author><id>tag:dotmobo.github.io,2015-10-10:bienvenue.html</id><summary type="html">&lt;p&gt;Tu trouveras sur ce blog tout un tas de trucs concernant le développement en général.&lt;/p&gt;
&lt;p&gt;J'y aborderai principalement tout ce qui touche de près ou de loin à l'univers de &lt;a class="reference external" href="https://www.python.org/"&gt;python&lt;/a&gt; et &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;django&lt;/a&gt;, en présentant des outils et librairies sympas et des trucs et astuces.&lt;/p&gt;
&lt;p&gt;Mais ça ne m’empêchera pas, de temps à autres, de lorgner du côté d'autres langages si je tombe sur d'intéressantes découvertes.&lt;/p&gt;
&lt;p&gt;Bonne lecture à tous.&lt;/p&gt;
</summary><category term="bienvenue"></category><category term="présentation"></category></entry></feed>